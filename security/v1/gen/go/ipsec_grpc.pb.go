//
// Copyright (C) 2021 Intel Corporation
// Copyright (c) 2023 Dell Inc, or its subsidiaries.
// SPDX-License-Identifier: Apache-2.0
//
// Major pieces taken from:
// https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ipsec.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IPsecService_IPsecVersion_FullMethodName    = "/opi_api.security.v1.IPsecService/IPsecVersion"
	IPsecService_IPsecStats_FullMethodName      = "/opi_api.security.v1.IPsecService/IPsecStats"
	IPsecService_IPsecInitiate_FullMethodName   = "/opi_api.security.v1.IPsecService/IPsecInitiate"
	IPsecService_IPsecTerminate_FullMethodName  = "/opi_api.security.v1.IPsecService/IPsecTerminate"
	IPsecService_IPsecRekey_FullMethodName      = "/opi_api.security.v1.IPsecService/IPsecRekey"
	IPsecService_IPsecListSas_FullMethodName    = "/opi_api.security.v1.IPsecService/IPsecListSas"
	IPsecService_IPsecListConns_FullMethodName  = "/opi_api.security.v1.IPsecService/IPsecListConns"
	IPsecService_IPsecListCerts_FullMethodName  = "/opi_api.security.v1.IPsecService/IPsecListCerts"
	IPsecService_IPsecLoadConn_FullMethodName   = "/opi_api.security.v1.IPsecService/IPsecLoadConn"
	IPsecService_IPsecUnloadConn_FullMethodName = "/opi_api.security.v1.IPsecService/IPsecUnloadConn"
)

// IPsecServiceClient is the client API for IPsecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPsecServiceClient interface {
	IPsecVersion(ctx context.Context, in *IPsecVersionRequest, opts ...grpc.CallOption) (*IPsecVersionResponse, error)
	IPsecStats(ctx context.Context, in *IPsecStatsRequest, opts ...grpc.CallOption) (*IPsecStatsResponse, error)
	IPsecInitiate(ctx context.Context, in *IPsecInitiateRequest, opts ...grpc.CallOption) (*IPsecInitiateResponse, error)
	IPsecTerminate(ctx context.Context, in *IPsecTerminateRequest, opts ...grpc.CallOption) (*IPsecTerminateResponse, error)
	IPsecRekey(ctx context.Context, in *IPsecRekeyRequest, opts ...grpc.CallOption) (*IPsecRekeyResponse, error)
	IPsecListSas(ctx context.Context, in *IPsecListSasRequest, opts ...grpc.CallOption) (*IPsecListSasResponse, error)
	IPsecListConns(ctx context.Context, in *IPsecListConnsRequest, opts ...grpc.CallOption) (*IPsecListConnsResponse, error)
	IPsecListCerts(ctx context.Context, in *IPsecListCertsRequest, opts ...grpc.CallOption) (*IPsecListCertsResponse, error)
	IPsecLoadConn(ctx context.Context, in *IPsecLoadConnRequest, opts ...grpc.CallOption) (*IPsecLoadConnResponse, error)
	IPsecUnloadConn(ctx context.Context, in *IPsecUnloadConnRequest, opts ...grpc.CallOption) (*IPsecUnloadConnResponse, error)
}

type iPsecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPsecServiceClient(cc grpc.ClientConnInterface) IPsecServiceClient {
	return &iPsecServiceClient{cc}
}

func (c *iPsecServiceClient) IPsecVersion(ctx context.Context, in *IPsecVersionRequest, opts ...grpc.CallOption) (*IPsecVersionResponse, error) {
	out := new(IPsecVersionResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecStats(ctx context.Context, in *IPsecStatsRequest, opts ...grpc.CallOption) (*IPsecStatsResponse, error) {
	out := new(IPsecStatsResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecInitiate(ctx context.Context, in *IPsecInitiateRequest, opts ...grpc.CallOption) (*IPsecInitiateResponse, error) {
	out := new(IPsecInitiateResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecInitiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecTerminate(ctx context.Context, in *IPsecTerminateRequest, opts ...grpc.CallOption) (*IPsecTerminateResponse, error) {
	out := new(IPsecTerminateResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecTerminate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecRekey(ctx context.Context, in *IPsecRekeyRequest, opts ...grpc.CallOption) (*IPsecRekeyResponse, error) {
	out := new(IPsecRekeyResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecRekey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecListSas(ctx context.Context, in *IPsecListSasRequest, opts ...grpc.CallOption) (*IPsecListSasResponse, error) {
	out := new(IPsecListSasResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecListSas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecListConns(ctx context.Context, in *IPsecListConnsRequest, opts ...grpc.CallOption) (*IPsecListConnsResponse, error) {
	out := new(IPsecListConnsResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecListConns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecListCerts(ctx context.Context, in *IPsecListCertsRequest, opts ...grpc.CallOption) (*IPsecListCertsResponse, error) {
	out := new(IPsecListCertsResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecListCerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecLoadConn(ctx context.Context, in *IPsecLoadConnRequest, opts ...grpc.CallOption) (*IPsecLoadConnResponse, error) {
	out := new(IPsecLoadConnResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecLoadConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecServiceClient) IPsecUnloadConn(ctx context.Context, in *IPsecUnloadConnRequest, opts ...grpc.CallOption) (*IPsecUnloadConnResponse, error) {
	out := new(IPsecUnloadConnResponse)
	err := c.cc.Invoke(ctx, IPsecService_IPsecUnloadConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPsecServiceServer is the server API for IPsecService service.
// All implementations must embed UnimplementedIPsecServiceServer
// for forward compatibility
type IPsecServiceServer interface {
	IPsecVersion(context.Context, *IPsecVersionRequest) (*IPsecVersionResponse, error)
	IPsecStats(context.Context, *IPsecStatsRequest) (*IPsecStatsResponse, error)
	IPsecInitiate(context.Context, *IPsecInitiateRequest) (*IPsecInitiateResponse, error)
	IPsecTerminate(context.Context, *IPsecTerminateRequest) (*IPsecTerminateResponse, error)
	IPsecRekey(context.Context, *IPsecRekeyRequest) (*IPsecRekeyResponse, error)
	IPsecListSas(context.Context, *IPsecListSasRequest) (*IPsecListSasResponse, error)
	IPsecListConns(context.Context, *IPsecListConnsRequest) (*IPsecListConnsResponse, error)
	IPsecListCerts(context.Context, *IPsecListCertsRequest) (*IPsecListCertsResponse, error)
	IPsecLoadConn(context.Context, *IPsecLoadConnRequest) (*IPsecLoadConnResponse, error)
	IPsecUnloadConn(context.Context, *IPsecUnloadConnRequest) (*IPsecUnloadConnResponse, error)
	mustEmbedUnimplementedIPsecServiceServer()
}

// UnimplementedIPsecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIPsecServiceServer struct {
}

func (UnimplementedIPsecServiceServer) IPsecVersion(context.Context, *IPsecVersionRequest) (*IPsecVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecVersion not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecStats(context.Context, *IPsecStatsRequest) (*IPsecStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecStats not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecInitiate(context.Context, *IPsecInitiateRequest) (*IPsecInitiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecInitiate not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecTerminate(context.Context, *IPsecTerminateRequest) (*IPsecTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecTerminate not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecRekey(context.Context, *IPsecRekeyRequest) (*IPsecRekeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecRekey not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecListSas(context.Context, *IPsecListSasRequest) (*IPsecListSasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecListSas not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecListConns(context.Context, *IPsecListConnsRequest) (*IPsecListConnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecListConns not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecListCerts(context.Context, *IPsecListCertsRequest) (*IPsecListCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecListCerts not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecLoadConn(context.Context, *IPsecLoadConnRequest) (*IPsecLoadConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecLoadConn not implemented")
}
func (UnimplementedIPsecServiceServer) IPsecUnloadConn(context.Context, *IPsecUnloadConnRequest) (*IPsecUnloadConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecUnloadConn not implemented")
}
func (UnimplementedIPsecServiceServer) mustEmbedUnimplementedIPsecServiceServer() {}

// UnsafeIPsecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPsecServiceServer will
// result in compilation errors.
type UnsafeIPsecServiceServer interface {
	mustEmbedUnimplementedIPsecServiceServer()
}

func RegisterIPsecServiceServer(s grpc.ServiceRegistrar, srv IPsecServiceServer) {
	s.RegisterService(&IPsecService_ServiceDesc, srv)
}

func _IPsecService_IPsecVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecVersion(ctx, req.(*IPsecVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecStats(ctx, req.(*IPsecStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecInitiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecInitiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecInitiate(ctx, req.(*IPsecInitiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecTerminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecTerminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecTerminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecTerminate(ctx, req.(*IPsecTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecRekey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecRekeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecRekey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecRekey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecRekey(ctx, req.(*IPsecRekeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecListSas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecListSasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecListSas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecListSas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecListSas(ctx, req.(*IPsecListSasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecListConns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecListConnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecListConns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecListConns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecListConns(ctx, req.(*IPsecListConnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecListCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecListCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecListCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecListCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecListCerts(ctx, req.(*IPsecListCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecLoadConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecLoadConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecLoadConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecLoadConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecLoadConn(ctx, req.(*IPsecLoadConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsecService_IPsecUnloadConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecUnloadConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServiceServer).IPsecUnloadConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPsecService_IPsecUnloadConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServiceServer).IPsecUnloadConn(ctx, req.(*IPsecUnloadConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPsecService_ServiceDesc is the grpc.ServiceDesc for IPsecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPsecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.security.v1.IPsecService",
	HandlerType: (*IPsecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPsecVersion",
			Handler:    _IPsecService_IPsecVersion_Handler,
		},
		{
			MethodName: "IPsecStats",
			Handler:    _IPsecService_IPsecStats_Handler,
		},
		{
			MethodName: "IPsecInitiate",
			Handler:    _IPsecService_IPsecInitiate_Handler,
		},
		{
			MethodName: "IPsecTerminate",
			Handler:    _IPsecService_IPsecTerminate_Handler,
		},
		{
			MethodName: "IPsecRekey",
			Handler:    _IPsecService_IPsecRekey_Handler,
		},
		{
			MethodName: "IPsecListSas",
			Handler:    _IPsecService_IPsecListSas_Handler,
		},
		{
			MethodName: "IPsecListConns",
			Handler:    _IPsecService_IPsecListConns_Handler,
		},
		{
			MethodName: "IPsecListCerts",
			Handler:    _IPsecService_IPsecListCerts_Handler,
		},
		{
			MethodName: "IPsecLoadConn",
			Handler:    _IPsecService_IPsecLoadConn_Handler,
		},
		{
			MethodName: "IPsecUnloadConn",
			Handler:    _IPsecService_IPsecUnloadConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto",
}
