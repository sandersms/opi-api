// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.
// Copyright (c) 2024 Ericsson AB.

// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)
// (-- api-linter: core::0216::synonyms=disabled
//     aip.dev/not-precedent: Word "Status" will be used instead of "State". --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: l2_xpu_infra_mgr.proto

package _go

import (
	_go "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LBOperStatus status reflects the operational status of a Logical Bridge
type LBOperStatus int32

const (
	// unknown
	LBOperStatus_LB_OPER_STATUS_UNSPECIFIED LBOperStatus = 0
	// Logical Bridge is up
	LBOperStatus_LB_OPER_STATUS_UP LBOperStatus = 1
	// Logical Bridge is down
	LBOperStatus_LB_OPER_STATUS_DOWN LBOperStatus = 2
	// Logical Bridge is to be deleted
	LBOperStatus_LB_OPER_STATUS_TO_BE_DELETED LBOperStatus = 3
)

// Enum value maps for LBOperStatus.
var (
	LBOperStatus_name = map[int32]string{
		0: "LB_OPER_STATUS_UNSPECIFIED",
		1: "LB_OPER_STATUS_UP",
		2: "LB_OPER_STATUS_DOWN",
		3: "LB_OPER_STATUS_TO_BE_DELETED",
	}
	LBOperStatus_value = map[string]int32{
		"LB_OPER_STATUS_UNSPECIFIED":   0,
		"LB_OPER_STATUS_UP":            1,
		"LB_OPER_STATUS_DOWN":          2,
		"LB_OPER_STATUS_TO_BE_DELETED": 3,
	}
)

func (x LBOperStatus) Enum() *LBOperStatus {
	p := new(LBOperStatus)
	*p = x
	return p
}

func (x LBOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LBOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_l2_xpu_infra_mgr_proto_enumTypes[0].Descriptor()
}

func (LBOperStatus) Type() protoreflect.EnumType {
	return &file_l2_xpu_infra_mgr_proto_enumTypes[0]
}

func (x LBOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LBOperStatus.Descriptor instead.
func (LBOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{0}
}

// BPOperStatus status reflects the operational status of a Bridge Port
type BPOperStatus int32

const (
	// unknown
	BPOperStatus_BP_OPER_STATUS_UNSPECIFIED BPOperStatus = 0
	// Bridge Port is up
	BPOperStatus_BP_OPER_STATUS_UP BPOperStatus = 1
	// Bridge Port is down
	BPOperStatus_BP_OPER_STATUS_DOWN BPOperStatus = 2
	// Bridge Port is to be deleted
	BPOperStatus_BP_OPER_STATUS_TO_BE_DELETED BPOperStatus = 3
)

// Enum value maps for BPOperStatus.
var (
	BPOperStatus_name = map[int32]string{
		0: "BP_OPER_STATUS_UNSPECIFIED",
		1: "BP_OPER_STATUS_UP",
		2: "BP_OPER_STATUS_DOWN",
		3: "BP_OPER_STATUS_TO_BE_DELETED",
	}
	BPOperStatus_value = map[string]int32{
		"BP_OPER_STATUS_UNSPECIFIED":   0,
		"BP_OPER_STATUS_UP":            1,
		"BP_OPER_STATUS_DOWN":          2,
		"BP_OPER_STATUS_TO_BE_DELETED": 3,
	}
)

func (x BPOperStatus) Enum() *BPOperStatus {
	p := new(BPOperStatus)
	*p = x
	return p
}

func (x BPOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BPOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_l2_xpu_infra_mgr_proto_enumTypes[1].Descriptor()
}

func (BPOperStatus) Type() protoreflect.EnumType {
	return &file_l2_xpu_infra_mgr_proto_enumTypes[1]
}

func (x BPOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BPOperStatus.Descriptor instead.
func (BPOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{1}
}

// BridgePortType reflects the different types of a Bridge Port
type BridgePortType int32

const (
	// "unknown" bridge port type
	BridgePortType_BRIDGE_PORT_TYPE_UNSPECIFIED BridgePortType = 0
	// "access" bridge port type
	BridgePortType_BRIDGE_PORT_TYPE_ACCESS BridgePortType = 1
	// "trunk" bridge port type
	BridgePortType_BRIDGE_PORT_TYPE_TRUNK BridgePortType = 2
)

// Enum value maps for BridgePortType.
var (
	BridgePortType_name = map[int32]string{
		0: "BRIDGE_PORT_TYPE_UNSPECIFIED",
		1: "BRIDGE_PORT_TYPE_ACCESS",
		2: "BRIDGE_PORT_TYPE_TRUNK",
	}
	BridgePortType_value = map[string]int32{
		"BRIDGE_PORT_TYPE_UNSPECIFIED": 0,
		"BRIDGE_PORT_TYPE_ACCESS":      1,
		"BRIDGE_PORT_TYPE_TRUNK":       2,
	}
)

func (x BridgePortType) Enum() *BridgePortType {
	p := new(BridgePortType)
	*p = x
	return p
}

func (x BridgePortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgePortType) Descriptor() protoreflect.EnumDescriptor {
	return file_l2_xpu_infra_mgr_proto_enumTypes[2].Descriptor()
}

func (BridgePortType) Type() protoreflect.EnumType {
	return &file_l2_xpu_infra_mgr_proto_enumTypes[2]
}

func (x BridgePortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgePortType.Descriptor instead.
func (BridgePortType) EnumDescriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{2}
}

// Logical Bridge network configuration and status
type LogicalBridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Logical Bridge.
	// "name" is an opaque object handle that is not user settable.
	// "name" will be returned with created object
	// user can only set {resource}_id on the Create request object
	// Format: logicalBridges/{logical_bridge}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Logical Bridge network configuration
	Spec *LogicalBridgeSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Logical Bridge network status
	Status *LogicalBridgeStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LogicalBridge) Reset() {
	*x = LogicalBridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalBridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalBridge) ProtoMessage() {}

func (x *LogicalBridge) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalBridge.ProtoReflect.Descriptor instead.
func (*LogicalBridge) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{0}
}

func (x *LogicalBridge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicalBridge) GetSpec() *LogicalBridgeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *LogicalBridge) GetStatus() *LogicalBridgeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Logical Bridge network configuration
type LogicalBridgeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the VLAN of the L2 domain
	// (-- api-linter: core::0141::forbidden-types=disabled
	//
	//	aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// VXLAN VNI for the L2 EVPN. Also used as EVPN route target
	// (-- api-linter: core::0141::forbidden-types=disabled
	//
	//	aip.dev/not-precedent: vni cannot be negative number. --)
	Vni *uint32 `protobuf:"varint,2,opt,name=vni,proto3,oneof" json:"vni,omitempty"`
	// IPv4 or IPv6 IP address prefix for the VXLAN TEP
	VtepIpPrefix *_go.IPPrefix `protobuf:"bytes,3,opt,name=vtep_ip_prefix,json=vtepIpPrefix,proto3" json:"vtep_ip_prefix,omitempty"`
}

func (x *LogicalBridgeSpec) Reset() {
	*x = LogicalBridgeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalBridgeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalBridgeSpec) ProtoMessage() {}

func (x *LogicalBridgeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalBridgeSpec.ProtoReflect.Descriptor instead.
func (*LogicalBridgeSpec) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{1}
}

func (x *LogicalBridgeSpec) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *LogicalBridgeSpec) GetVni() uint32 {
	if x != nil && x.Vni != nil {
		return *x.Vni
	}
	return 0
}

func (x *LogicalBridgeSpec) GetVtepIpPrefix() *_go.IPPrefix {
	if x != nil {
		return x.VtepIpPrefix
	}
	return nil
}

// operational status of a Logical Bridge
type LogicalBridgeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operational state of a Logical Bridge
	OperStatus LBOperStatus `protobuf:"varint,1,opt,name=oper_status,json=operStatus,proto3,enum=opi_api.network.evpn_gw.v1alpha1.LBOperStatus" json:"oper_status,omitempty"`
	// status of the components
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *LogicalBridgeStatus) Reset() {
	*x = LogicalBridgeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalBridgeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalBridgeStatus) ProtoMessage() {}

func (x *LogicalBridgeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalBridgeStatus.ProtoReflect.Descriptor instead.
func (*LogicalBridgeStatus) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{2}
}

func (x *LogicalBridgeStatus) GetOperStatus() LBOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return LBOperStatus_LB_OPER_STATUS_UNSPECIFIED
}

func (x *LogicalBridgeStatus) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// CreateLogicalBridgeRequest structure
type CreateLogicalBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to use for the logical bridge, which will become the final component of
	// the logical bridge's resource name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	// If this is not provided the system will auto-generate it.
	LogicalBridgeId string `protobuf:"bytes,1,opt,name=logical_bridge_id,json=logicalBridgeId,proto3" json:"logical_bridge_id,omitempty"`
	// The logical bridge to create
	LogicalBridge *LogicalBridge `protobuf:"bytes,2,opt,name=logical_bridge,json=logicalBridge,proto3" json:"logical_bridge,omitempty"`
}

func (x *CreateLogicalBridgeRequest) Reset() {
	*x = CreateLogicalBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLogicalBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogicalBridgeRequest) ProtoMessage() {}

func (x *CreateLogicalBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogicalBridgeRequest.ProtoReflect.Descriptor instead.
func (*CreateLogicalBridgeRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLogicalBridgeRequest) GetLogicalBridgeId() string {
	if x != nil {
		return x.LogicalBridgeId
	}
	return ""
}

func (x *CreateLogicalBridgeRequest) GetLogicalBridge() *LogicalBridge {
	if x != nil {
		return x.LogicalBridge
	}
	return nil
}

// ListLogicalBridgesRequest structure
type ListLogicalBridgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListLogicalBridgesRequest) Reset() {
	*x = ListLogicalBridgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogicalBridgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogicalBridgesRequest) ProtoMessage() {}

func (x *ListLogicalBridgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogicalBridgesRequest.ProtoReflect.Descriptor instead.
func (*ListLogicalBridgesRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{4}
}

func (x *ListLogicalBridgesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLogicalBridgesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListLogicalBridgesResponse structure
type ListLogicalBridgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the logical bridges
	LogicalBridges []*LogicalBridge `protobuf:"bytes,1,rep,name=logical_bridges,json=logicalBridges,proto3" json:"logical_bridges,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLogicalBridgesResponse) Reset() {
	*x = ListLogicalBridgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogicalBridgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogicalBridgesResponse) ProtoMessage() {}

func (x *ListLogicalBridgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogicalBridgesResponse.ProtoReflect.Descriptor instead.
func (*ListLogicalBridgesResponse) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{5}
}

func (x *ListLogicalBridgesResponse) GetLogicalBridges() []*LogicalBridge {
	if x != nil {
		return x.LogicalBridges
	}
	return nil
}

func (x *ListLogicalBridgesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetLogicalBridgeRequest structure
type GetLogicalBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the logical bridge to retrieve
	// Format: logicalBridges/{logical_bridge}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLogicalBridgeRequest) Reset() {
	*x = GetLogicalBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogicalBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogicalBridgeRequest) ProtoMessage() {}

func (x *GetLogicalBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogicalBridgeRequest.ProtoReflect.Descriptor instead.
func (*GetLogicalBridgeRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{6}
}

func (x *GetLogicalBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteLogicalBridgeRequest structure
type DeleteLogicalBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the logical bridge to retrieve
	// Format: logicalBridges/{logical_bridge}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteLogicalBridgeRequest) Reset() {
	*x = DeleteLogicalBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLogicalBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLogicalBridgeRequest) ProtoMessage() {}

func (x *DeleteLogicalBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLogicalBridgeRequest.ProtoReflect.Descriptor instead.
func (*DeleteLogicalBridgeRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteLogicalBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteLogicalBridgeRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// UpdateLogicalBridgeRequest structure
type UpdateLogicalBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	LogicalBridge *LogicalBridge `protobuf:"bytes,1,opt,name=logical_bridge,json=logicalBridge,proto3" json:"logical_bridge,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateLogicalBridgeRequest) Reset() {
	*x = UpdateLogicalBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLogicalBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLogicalBridgeRequest) ProtoMessage() {}

func (x *UpdateLogicalBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLogicalBridgeRequest.ProtoReflect.Descriptor instead.
func (*UpdateLogicalBridgeRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateLogicalBridgeRequest) GetLogicalBridge() *LogicalBridge {
	if x != nil {
		return x.LogicalBridge
	}
	return nil
}

func (x *UpdateLogicalBridgeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateLogicalBridgeRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Bridge Port network configuration and status
type BridgePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Bridge Port.
	// "name" is an opaque object handle that is not user settable.
	// "name" will be returned with created object
	// user can only set {resource}_id on the Create request object
	// Format: bridge_ports/{bridge_port}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Bridge Port network configuration
	Spec *BridgePortSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Bridge Port network status
	Status *BridgePortStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BridgePort) Reset() {
	*x = BridgePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgePort) ProtoMessage() {}

func (x *BridgePort) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgePort.ProtoReflect.Descriptor instead.
func (*BridgePort) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{9}
}

func (x *BridgePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BridgePort) GetSpec() *BridgePortSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BridgePort) GetStatus() *BridgePortStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Bridge Port network configuration
type BridgePortSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bridge Port's MAC address.
	MacAddress []byte `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Type of Bridge Port
	Ptype BridgePortType `protobuf:"varint,2,opt,name=ptype,proto3,enum=opi_api.network.evpn_gw.v1alpha1.BridgePortType" json:"ptype,omitempty"`
	// List of Logical Bridges this Bridge Port will attach.
	// This will define the VLANs that will be enabled in this Bridge Port
	LogicalBridges []string `protobuf:"bytes,3,rep,name=logical_bridges,json=logicalBridges,proto3" json:"logical_bridges,omitempty"`
}

func (x *BridgePortSpec) Reset() {
	*x = BridgePortSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgePortSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgePortSpec) ProtoMessage() {}

func (x *BridgePortSpec) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgePortSpec.ProtoReflect.Descriptor instead.
func (*BridgePortSpec) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{10}
}

func (x *BridgePortSpec) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *BridgePortSpec) GetPtype() BridgePortType {
	if x != nil {
		return x.Ptype
	}
	return BridgePortType_BRIDGE_PORT_TYPE_UNSPECIFIED
}

func (x *BridgePortSpec) GetLogicalBridges() []string {
	if x != nil {
		return x.LogicalBridges
	}
	return nil
}

// operational status of a Bridge Port
type BridgePortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operational status of a Bridge Port
	OperStatus BPOperStatus `protobuf:"varint,1,opt,name=oper_status,json=operStatus,proto3,enum=opi_api.network.evpn_gw.v1alpha1.BPOperStatus" json:"oper_status,omitempty"`
	// status of the components
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *BridgePortStatus) Reset() {
	*x = BridgePortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgePortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgePortStatus) ProtoMessage() {}

func (x *BridgePortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgePortStatus.ProtoReflect.Descriptor instead.
func (*BridgePortStatus) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{11}
}

func (x *BridgePortStatus) GetOperStatus() BPOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return BPOperStatus_BP_OPER_STATUS_UNSPECIFIED
}

func (x *BridgePortStatus) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// CreateBridgePortRequest structure
type CreateBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to use for the bridge port, which will become the final component of
	// the bridge port's resource name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	// If this is not provided the system will auto-generate it.
	BridgePortId string `protobuf:"bytes,1,opt,name=bridge_port_id,json=bridgePortId,proto3" json:"bridge_port_id,omitempty"`
	// The bridge port to create
	BridgePort *BridgePort `protobuf:"bytes,2,opt,name=bridge_port,json=bridgePort,proto3" json:"bridge_port,omitempty"`
}

func (x *CreateBridgePortRequest) Reset() {
	*x = CreateBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBridgePortRequest) ProtoMessage() {}

func (x *CreateBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBridgePortRequest.ProtoReflect.Descriptor instead.
func (*CreateBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{12}
}

func (x *CreateBridgePortRequest) GetBridgePortId() string {
	if x != nil {
		return x.BridgePortId
	}
	return ""
}

func (x *CreateBridgePortRequest) GetBridgePort() *BridgePort {
	if x != nil {
		return x.BridgePort
	}
	return nil
}

// ListBridgePortsRequest structure
type ListBridgePortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBridgePortsRequest) Reset() {
	*x = ListBridgePortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBridgePortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgePortsRequest) ProtoMessage() {}

func (x *ListBridgePortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgePortsRequest.ProtoReflect.Descriptor instead.
func (*ListBridgePortsRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{13}
}

func (x *ListBridgePortsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBridgePortsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListBridgePortsResponse structure
type ListBridgePortsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the bridge ports
	BridgePorts []*BridgePort `protobuf:"bytes,1,rep,name=bridge_ports,json=bridgePorts,proto3" json:"bridge_ports,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBridgePortsResponse) Reset() {
	*x = ListBridgePortsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBridgePortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgePortsResponse) ProtoMessage() {}

func (x *ListBridgePortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgePortsResponse.ProtoReflect.Descriptor instead.
func (*ListBridgePortsResponse) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{14}
}

func (x *ListBridgePortsResponse) GetBridgePorts() []*BridgePort {
	if x != nil {
		return x.BridgePorts
	}
	return nil
}

func (x *ListBridgePortsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetBridgePortRequest structure
type GetBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the bridge port to retrieve
	// Format: bridgePorts/{bridge_port}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBridgePortRequest) Reset() {
	*x = GetBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgePortRequest) ProtoMessage() {}

func (x *GetBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgePortRequest.ProtoReflect.Descriptor instead.
func (*GetBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{15}
}

func (x *GetBridgePortRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteBridgePortRequest structure
type DeleteBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the bridge port to retrieve
	// Format: bridgePorts/{bridge_port}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteBridgePortRequest) Reset() {
	*x = DeleteBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBridgePortRequest) ProtoMessage() {}

func (x *DeleteBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBridgePortRequest.ProtoReflect.Descriptor instead.
func (*DeleteBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteBridgePortRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteBridgePortRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// UpdateBridgePortRequest structure
type UpdateBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	BridgePort *BridgePort `protobuf:"bytes,1,opt,name=bridge_port,json=bridgePort,proto3" json:"bridge_port,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateBridgePortRequest) Reset() {
	*x = UpdateBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBridgePortRequest) ProtoMessage() {}

func (x *UpdateBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBridgePortRequest.ProtoReflect.Descriptor instead.
func (*UpdateBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateBridgePortRequest) GetBridgePort() *BridgePort {
	if x != nil {
		return x.BridgePort
	}
	return nil
}

func (x *UpdateBridgePortRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateBridgePortRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

var File_l2_xpu_infra_mgr_proto protoreflect.FileDescriptor

var file_l2_xpu_infra_mgr_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x32, 0x5f, 0x78, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x6d,
	0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x12, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x73,
	0xea, 0x41, 0x70, 0x0a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x1f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x7d, 0x2a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x73, 0x32, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0e, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x76, 0x74, 0x65, 0x70, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x76, 0x6e, 0x69, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x54, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x42, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e,
	0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x65, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x22, 0xe5, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xa7, 0x02, 0x0a,
	0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x64, 0xea, 0x41, 0x61, 0x0a, 0x2b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x19, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x7b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x2a, 0x0b, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x32, 0x0a, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4b, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x54, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x50, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e,
	0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x52,
	0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x5e, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e,
	0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2a, 0x80, 0x01, 0x0a, 0x0c, 0x4c, 0x42, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x42, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x42, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x42, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x42, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x80, 0x01, 0x0a, 0x0c, 0x42, 0x50, 0x4f, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x50, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x50, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x50, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x6b, 0x0a, 0x0e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42,
	0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x32, 0xc9, 0x07, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xd3, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x4d, 0xda, 0x41, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x3a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e,
	0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x22, 0x2a, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0x97, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe5, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x22, 0x5f, 0xda, 0x41, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x32, 0xfb, 0x06, 0x0a, 0x11, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x41, 0xda, 0x41, 0x1a, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0x27, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8e, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x27, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd0, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x53, 0xda, 0x41, 0x17,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x0b, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x42, 0x77, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x4c, 0x32, 0x58, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x4d, 0x67, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x65, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_l2_xpu_infra_mgr_proto_rawDescOnce sync.Once
	file_l2_xpu_infra_mgr_proto_rawDescData = file_l2_xpu_infra_mgr_proto_rawDesc
)

func file_l2_xpu_infra_mgr_proto_rawDescGZIP() []byte {
	file_l2_xpu_infra_mgr_proto_rawDescOnce.Do(func() {
		file_l2_xpu_infra_mgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_l2_xpu_infra_mgr_proto_rawDescData)
	})
	return file_l2_xpu_infra_mgr_proto_rawDescData
}

var file_l2_xpu_infra_mgr_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_l2_xpu_infra_mgr_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_l2_xpu_infra_mgr_proto_goTypes = []interface{}{
	(LBOperStatus)(0),                  // 0: opi_api.network.evpn_gw.v1alpha1.LBOperStatus
	(BPOperStatus)(0),                  // 1: opi_api.network.evpn_gw.v1alpha1.BPOperStatus
	(BridgePortType)(0),                // 2: opi_api.network.evpn_gw.v1alpha1.BridgePortType
	(*LogicalBridge)(nil),              // 3: opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	(*LogicalBridgeSpec)(nil),          // 4: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec
	(*LogicalBridgeStatus)(nil),        // 5: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus
	(*CreateLogicalBridgeRequest)(nil), // 6: opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest
	(*ListLogicalBridgesRequest)(nil),  // 7: opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest
	(*ListLogicalBridgesResponse)(nil), // 8: opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse
	(*GetLogicalBridgeRequest)(nil),    // 9: opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest
	(*DeleteLogicalBridgeRequest)(nil), // 10: opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest
	(*UpdateLogicalBridgeRequest)(nil), // 11: opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest
	(*BridgePort)(nil),                 // 12: opi_api.network.evpn_gw.v1alpha1.BridgePort
	(*BridgePortSpec)(nil),             // 13: opi_api.network.evpn_gw.v1alpha1.BridgePortSpec
	(*BridgePortStatus)(nil),           // 14: opi_api.network.evpn_gw.v1alpha1.BridgePortStatus
	(*CreateBridgePortRequest)(nil),    // 15: opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest
	(*ListBridgePortsRequest)(nil),     // 16: opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest
	(*ListBridgePortsResponse)(nil),    // 17: opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse
	(*GetBridgePortRequest)(nil),       // 18: opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest
	(*DeleteBridgePortRequest)(nil),    // 19: opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest
	(*UpdateBridgePortRequest)(nil),    // 20: opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest
	(*_go.IPPrefix)(nil),               // 21: opi_api.network.opinetcommon.v1alpha1.IPPrefix
	(*Component)(nil),                  // 22: opi_api.network.evpn_gw.v1alpha1.Component
	(*fieldmaskpb.FieldMask)(nil),      // 23: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),              // 24: google.protobuf.Empty
}
var file_l2_xpu_infra_mgr_proto_depIdxs = []int32{
	4,  // 0: opi_api.network.evpn_gw.v1alpha1.LogicalBridge.spec:type_name -> opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec
	5,  // 1: opi_api.network.evpn_gw.v1alpha1.LogicalBridge.status:type_name -> opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus
	21, // 2: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeSpec.vtep_ip_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	0,  // 3: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus.oper_status:type_name -> opi_api.network.evpn_gw.v1alpha1.LBOperStatus
	22, // 4: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeStatus.components:type_name -> opi_api.network.evpn_gw.v1alpha1.Component
	3,  // 5: opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge:type_name -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	3,  // 6: opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.logical_bridges:type_name -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	3,  // 7: opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.logical_bridge:type_name -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	23, // 8: opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest.update_mask:type_name -> google.protobuf.FieldMask
	13, // 9: opi_api.network.evpn_gw.v1alpha1.BridgePort.spec:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePortSpec
	14, // 10: opi_api.network.evpn_gw.v1alpha1.BridgePort.status:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePortStatus
	2,  // 11: opi_api.network.evpn_gw.v1alpha1.BridgePortSpec.ptype:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePortType
	1,  // 12: opi_api.network.evpn_gw.v1alpha1.BridgePortStatus.oper_status:type_name -> opi_api.network.evpn_gw.v1alpha1.BPOperStatus
	22, // 13: opi_api.network.evpn_gw.v1alpha1.BridgePortStatus.components:type_name -> opi_api.network.evpn_gw.v1alpha1.Component
	12, // 14: opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	12, // 15: opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.bridge_ports:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	12, // 16: opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.bridge_port:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	23, // 17: opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 18: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.CreateLogicalBridge:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest
	7,  // 19: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.ListLogicalBridges:input_type -> opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest
	9,  // 20: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.GetLogicalBridge:input_type -> opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest
	10, // 21: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.DeleteLogicalBridge:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest
	11, // 22: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.UpdateLogicalBridge:input_type -> opi_api.network.evpn_gw.v1alpha1.UpdateLogicalBridgeRequest
	15, // 23: opi_api.network.evpn_gw.v1alpha1.BridgePortService.CreateBridgePort:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest
	16, // 24: opi_api.network.evpn_gw.v1alpha1.BridgePortService.ListBridgePorts:input_type -> opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest
	18, // 25: opi_api.network.evpn_gw.v1alpha1.BridgePortService.GetBridgePort:input_type -> opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest
	19, // 26: opi_api.network.evpn_gw.v1alpha1.BridgePortService.DeleteBridgePort:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest
	20, // 27: opi_api.network.evpn_gw.v1alpha1.BridgePortService.UpdateBridgePort:input_type -> opi_api.network.evpn_gw.v1alpha1.UpdateBridgePortRequest
	3,  // 28: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.CreateLogicalBridge:output_type -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	8,  // 29: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.ListLogicalBridges:output_type -> opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse
	3,  // 30: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.GetLogicalBridge:output_type -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	24, // 31: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.DeleteLogicalBridge:output_type -> google.protobuf.Empty
	3,  // 32: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.UpdateLogicalBridge:output_type -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	12, // 33: opi_api.network.evpn_gw.v1alpha1.BridgePortService.CreateBridgePort:output_type -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	17, // 34: opi_api.network.evpn_gw.v1alpha1.BridgePortService.ListBridgePorts:output_type -> opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse
	12, // 35: opi_api.network.evpn_gw.v1alpha1.BridgePortService.GetBridgePort:output_type -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	24, // 36: opi_api.network.evpn_gw.v1alpha1.BridgePortService.DeleteBridgePort:output_type -> google.protobuf.Empty
	12, // 37: opi_api.network.evpn_gw.v1alpha1.BridgePortService.UpdateBridgePort:output_type -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_l2_xpu_infra_mgr_proto_init() }
func file_l2_xpu_infra_mgr_proto_init() {
	if File_l2_xpu_infra_mgr_proto != nil {
		return
	}
	file_component_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_l2_xpu_infra_mgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalBridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalBridgeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalBridgeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLogicalBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogicalBridgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogicalBridgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogicalBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLogicalBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLogicalBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgePortSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgePortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBridgePortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBridgePortsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_l2_xpu_infra_mgr_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_l2_xpu_infra_mgr_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_l2_xpu_infra_mgr_proto_goTypes,
		DependencyIndexes: file_l2_xpu_infra_mgr_proto_depIdxs,
		EnumInfos:         file_l2_xpu_infra_mgr_proto_enumTypes,
		MessageInfos:      file_l2_xpu_infra_mgr_proto_msgTypes,
	}.Build()
	File_l2_xpu_infra_mgr_proto = out.File
	file_l2_xpu_infra_mgr_proto_rawDesc = nil
	file_l2_xpu_infra_mgr_proto_goTypes = nil
	file_l2_xpu_infra_mgr_proto_depIdxs = nil
}
