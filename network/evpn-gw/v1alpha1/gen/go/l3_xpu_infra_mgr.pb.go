// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.
// Copyright (c) 2024 Ericsson AB.

// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)
// (-- api-linter: core::0216::synonyms=disabled
//     aip.dev/not-precedent: Word "Status" will be used instead of "State". --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: l3_xpu_infra_mgr.proto

package _go

import (
	_go "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VRFOperStatus status reflects the operational status of a Vrf
type VRFOperStatus int32

const (
	// unknown
	VRFOperStatus_VRF_OPER_STATUS_UNSPECIFIED VRFOperStatus = 0
	// Vrf is up
	VRFOperStatus_VRF_OPER_STATUS_UP VRFOperStatus = 1
	// Vrf is down
	VRFOperStatus_VRF_OPER_STATUS_DOWN VRFOperStatus = 2
	// Vrf is to be deleted
	VRFOperStatus_VRF_OPER_STATUS_TO_BE_DELETED VRFOperStatus = 3
)

// Enum value maps for VRFOperStatus.
var (
	VRFOperStatus_name = map[int32]string{
		0: "VRF_OPER_STATUS_UNSPECIFIED",
		1: "VRF_OPER_STATUS_UP",
		2: "VRF_OPER_STATUS_DOWN",
		3: "VRF_OPER_STATUS_TO_BE_DELETED",
	}
	VRFOperStatus_value = map[string]int32{
		"VRF_OPER_STATUS_UNSPECIFIED":   0,
		"VRF_OPER_STATUS_UP":            1,
		"VRF_OPER_STATUS_DOWN":          2,
		"VRF_OPER_STATUS_TO_BE_DELETED": 3,
	}
)

func (x VRFOperStatus) Enum() *VRFOperStatus {
	p := new(VRFOperStatus)
	*p = x
	return p
}

func (x VRFOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VRFOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_l3_xpu_infra_mgr_proto_enumTypes[0].Descriptor()
}

func (VRFOperStatus) Type() protoreflect.EnumType {
	return &file_l3_xpu_infra_mgr_proto_enumTypes[0]
}

func (x VRFOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VRFOperStatus.Descriptor instead.
func (VRFOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{0}
}

// SVIOperStatus status reflects the operational status of a Svi
type SVIOperStatus int32

const (
	// unknown
	SVIOperStatus_SVI_OPER_STATUS_UNSPECIFIED SVIOperStatus = 0
	// Svi is up
	SVIOperStatus_SVI_OPER_STATUS_UP SVIOperStatus = 1
	// Svi is down
	SVIOperStatus_SVI_OPER_STATUS_DOWN SVIOperStatus = 2
	// Svi is to be deleted
	SVIOperStatus_SVI_OPER_STATUS_TO_BE_DELETED SVIOperStatus = 3
)

// Enum value maps for SVIOperStatus.
var (
	SVIOperStatus_name = map[int32]string{
		0: "SVI_OPER_STATUS_UNSPECIFIED",
		1: "SVI_OPER_STATUS_UP",
		2: "SVI_OPER_STATUS_DOWN",
		3: "SVI_OPER_STATUS_TO_BE_DELETED",
	}
	SVIOperStatus_value = map[string]int32{
		"SVI_OPER_STATUS_UNSPECIFIED":   0,
		"SVI_OPER_STATUS_UP":            1,
		"SVI_OPER_STATUS_DOWN":          2,
		"SVI_OPER_STATUS_TO_BE_DELETED": 3,
	}
)

func (x SVIOperStatus) Enum() *SVIOperStatus {
	p := new(SVIOperStatus)
	*p = x
	return p
}

func (x SVIOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SVIOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_l3_xpu_infra_mgr_proto_enumTypes[1].Descriptor()
}

func (SVIOperStatus) Type() protoreflect.EnumType {
	return &file_l3_xpu_infra_mgr_proto_enumTypes[1]
}

func (x SVIOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SVIOperStatus.Descriptor instead.
func (SVIOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{1}
}

// Vrf level network configuration
type Vrf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Vrf.
	// "name" is an opaque object handle that is not user settable.
	// "name" will be returned with created object
	// user can only set {resource}_id on the Create request object
	// Format: vrfs/{vrf}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Vrf's network configuration
	Spec *VrfSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Vrf's network status
	Status *VrfStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Vrf) Reset() {
	*x = Vrf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vrf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vrf) ProtoMessage() {}

func (x *Vrf) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vrf.ProtoReflect.Descriptor instead.
func (*Vrf) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{0}
}

func (x *Vrf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vrf) GetSpec() *VrfSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Vrf) GetStatus() *VrfStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Vrf network configuration
type VrfSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VXLAN VNI for L3 EVPN. Also used as EVPN route target
	// (-- api-linter: core::0141::forbidden-types=disabled
	//
	//	aip.dev/not-precedent: vni cannot be negative number. --)
	Vni *uint32 `protobuf:"varint,1,opt,name=vni,proto3,oneof" json:"vni,omitempty"`
	// IPv4 or IPv6 loopback address prefix. Also serves as basis for RD in FRR
	LoopbackIpPrefix *_go.IPPrefix `protobuf:"bytes,2,opt,name=loopback_ip_prefix,json=loopbackIpPrefix,proto3" json:"loopback_ip_prefix,omitempty"`
	// IPv4 or IPv6 IP address prefix for the VXLAN TEP
	VtepIpPrefix *_go.IPPrefix `protobuf:"bytes,3,opt,name=vtep_ip_prefix,json=vtepIpPrefix,proto3" json:"vtep_ip_prefix,omitempty"`
}

func (x *VrfSpec) Reset() {
	*x = VrfSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrfSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrfSpec) ProtoMessage() {}

func (x *VrfSpec) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrfSpec.ProtoReflect.Descriptor instead.
func (*VrfSpec) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{1}
}

func (x *VrfSpec) GetVni() uint32 {
	if x != nil && x.Vni != nil {
		return *x.Vni
	}
	return 0
}

func (x *VrfSpec) GetLoopbackIpPrefix() *_go.IPPrefix {
	if x != nil {
		return x.LoopbackIpPrefix
	}
	return nil
}

func (x *VrfSpec) GetVtepIpPrefix() *_go.IPPrefix {
	if x != nil {
		return x.VtepIpPrefix
	}
	return nil
}

// operational status of a Vrf
type VrfStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operational status of a Vrf
	OperStatus VRFOperStatus `protobuf:"varint,8,opt,name=oper_status,json=operStatus,proto3,enum=opi_api.network.evpn_gw.v1alpha1.VRFOperStatus" json:"oper_status,omitempty"`
	// status of the components
	Components []*Component `protobuf:"bytes,9,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *VrfStatus) Reset() {
	*x = VrfStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrfStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrfStatus) ProtoMessage() {}

func (x *VrfStatus) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrfStatus.ProtoReflect.Descriptor instead.
func (*VrfStatus) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{2}
}

func (x *VrfStatus) GetOperStatus() VRFOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return VRFOperStatus_VRF_OPER_STATUS_UNSPECIFIED
}

func (x *VrfStatus) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// CreateVrfRequest structure
type CreateVrfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to use for the vrf, which will become the final component of
	// the vrf's resource name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	// If this is not provided the system will auto-generate it.
	VrfId string `protobuf:"bytes,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// The vrf to create
	Vrf *Vrf `protobuf:"bytes,2,opt,name=vrf,proto3" json:"vrf,omitempty"`
}

func (x *CreateVrfRequest) Reset() {
	*x = CreateVrfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVrfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVrfRequest) ProtoMessage() {}

func (x *CreateVrfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVrfRequest.ProtoReflect.Descriptor instead.
func (*CreateVrfRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVrfRequest) GetVrfId() string {
	if x != nil {
		return x.VrfId
	}
	return ""
}

func (x *CreateVrfRequest) GetVrf() *Vrf {
	if x != nil {
		return x.Vrf
	}
	return nil
}

// ListVrfsRequest structure
type ListVrfsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVrfsRequest) Reset() {
	*x = ListVrfsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVrfsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVrfsRequest) ProtoMessage() {}

func (x *ListVrfsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVrfsRequest.ProtoReflect.Descriptor instead.
func (*ListVrfsRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{4}
}

func (x *ListVrfsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVrfsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListVrfsResponse structure
type ListVrfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the vrfs
	Vrfs []*Vrf `protobuf:"bytes,1,rep,name=vrfs,proto3" json:"vrfs,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVrfsResponse) Reset() {
	*x = ListVrfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVrfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVrfsResponse) ProtoMessage() {}

func (x *ListVrfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVrfsResponse.ProtoReflect.Descriptor instead.
func (*ListVrfsResponse) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{5}
}

func (x *ListVrfsResponse) GetVrfs() []*Vrf {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

func (x *ListVrfsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetVrfRequest structure
type GetVrfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the vrf to retrieve
	// Format: vrfs/{vrf}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVrfRequest) Reset() {
	*x = GetVrfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVrfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVrfRequest) ProtoMessage() {}

func (x *GetVrfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVrfRequest.ProtoReflect.Descriptor instead.
func (*GetVrfRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{6}
}

func (x *GetVrfRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteVrfRequest structure
type DeleteVrfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the vrf to delete
	// Format: vrfs/{vrf}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteVrfRequest) Reset() {
	*x = DeleteVrfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVrfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVrfRequest) ProtoMessage() {}

func (x *DeleteVrfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVrfRequest.ProtoReflect.Descriptor instead.
func (*DeleteVrfRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteVrfRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVrfRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// UpdateVrfRequest structure
type UpdateVrfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	Vrf *Vrf `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateVrfRequest) Reset() {
	*x = UpdateVrfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVrfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVrfRequest) ProtoMessage() {}

func (x *UpdateVrfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVrfRequest.ProtoReflect.Descriptor instead.
func (*UpdateVrfRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateVrfRequest) GetVrf() *Vrf {
	if x != nil {
		return x.Vrf
	}
	return nil
}

func (x *UpdateVrfRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateVrfRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Svi network configuration
type Svi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the Svi.
	// "name" is an opaque object handle that is not user settable.
	// "name" will be returned with created object
	// user can only set {resource}_id on the Create request object
	// Format: svis/{svi}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Svi's network configuration
	Spec *SviSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Svi's network status
	Status *SviStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Svi) Reset() {
	*x = Svi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svi) ProtoMessage() {}

func (x *Svi) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svi.ProtoReflect.Descriptor instead.
func (*Svi) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{9}
}

func (x *Svi) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Svi) GetSpec() *SviSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Svi) GetStatus() *SviStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Svi's network configuration
type SviSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vrf name
	// Format is `vrfs/{vrf}`
	Vrf string `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Logical Bridge name
	// Format is `logicalBridges/{logical_bridge}`
	LogicalBridge string `protobuf:"bytes,2,opt,name=logical_bridge,json=logicalBridge,proto3" json:"logical_bridge,omitempty"`
	// Svi's MAC address.
	MacAddress []byte `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// The GW IP addresses assigned to the SVI
	GwIpPrefix []*_go.IPPrefix `protobuf:"bytes,4,rep,name=gw_ip_prefix,json=gwIpPrefix,proto3" json:"gw_ip_prefix,omitempty"`
	// Set to true to enable BGP peering with Vrf on Svi
	EnableBgp bool `protobuf:"varint,5,opt,name=enable_bgp,json=enableBgp,proto3" json:"enable_bgp,omitempty"`
	// Conditional: The remote AS used by BGP speakers on LB (1-65535)
	// (-- api-linter: core::0141::forbidden-types=disabled
	//
	//	aip.dev/not-precedent: remote_as cannot be negative number. --)
	RemoteAs uint32 `protobuf:"varint,6,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
}

func (x *SviSpec) Reset() {
	*x = SviSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SviSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SviSpec) ProtoMessage() {}

func (x *SviSpec) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SviSpec.ProtoReflect.Descriptor instead.
func (*SviSpec) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{10}
}

func (x *SviSpec) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *SviSpec) GetLogicalBridge() string {
	if x != nil {
		return x.LogicalBridge
	}
	return ""
}

func (x *SviSpec) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *SviSpec) GetGwIpPrefix() []*_go.IPPrefix {
	if x != nil {
		return x.GwIpPrefix
	}
	return nil
}

func (x *SviSpec) GetEnableBgp() bool {
	if x != nil {
		return x.EnableBgp
	}
	return false
}

func (x *SviSpec) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

// operational status of a Svi
type SviStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operational status of a Svi
	OperStatus SVIOperStatus `protobuf:"varint,1,opt,name=oper_status,json=operStatus,proto3,enum=opi_api.network.evpn_gw.v1alpha1.SVIOperStatus" json:"oper_status,omitempty"`
	// status of the components
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *SviStatus) Reset() {
	*x = SviStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SviStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SviStatus) ProtoMessage() {}

func (x *SviStatus) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SviStatus.ProtoReflect.Descriptor instead.
func (*SviStatus) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{11}
}

func (x *SviStatus) GetOperStatus() SVIOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return SVIOperStatus_SVI_OPER_STATUS_UNSPECIFIED
}

func (x *SviStatus) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// CreateSviRequest structure
type CreateSviRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to use for the svi, which will become the final component of
	// the svi's resource name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	// If this is not provided the system will auto-generate it.
	SviId string `protobuf:"bytes,1,opt,name=svi_id,json=sviId,proto3" json:"svi_id,omitempty"`
	// The Svi to create
	Svi *Svi `protobuf:"bytes,2,opt,name=svi,proto3" json:"svi,omitempty"`
}

func (x *CreateSviRequest) Reset() {
	*x = CreateSviRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSviRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSviRequest) ProtoMessage() {}

func (x *CreateSviRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSviRequest.ProtoReflect.Descriptor instead.
func (*CreateSviRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{12}
}

func (x *CreateSviRequest) GetSviId() string {
	if x != nil {
		return x.SviId
	}
	return ""
}

func (x *CreateSviRequest) GetSvi() *Svi {
	if x != nil {
		return x.Svi
	}
	return nil
}

// ListSvisRequest structure
type ListSvisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSvisRequest) Reset() {
	*x = ListSvisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSvisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSvisRequest) ProtoMessage() {}

func (x *ListSvisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSvisRequest.ProtoReflect.Descriptor instead.
func (*ListSvisRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{13}
}

func (x *ListSvisRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSvisRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListSvisResponse structure
type ListSvisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the svis
	Svis []*Svi `protobuf:"bytes,1,rep,name=svis,proto3" json:"svis,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSvisResponse) Reset() {
	*x = ListSvisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSvisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSvisResponse) ProtoMessage() {}

func (x *ListSvisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSvisResponse.ProtoReflect.Descriptor instead.
func (*ListSvisResponse) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{14}
}

func (x *ListSvisResponse) GetSvis() []*Svi {
	if x != nil {
		return x.Svis
	}
	return nil
}

func (x *ListSvisResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetSviRequest structure
type GetSviRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the svi to retrieve
	// Format: svis/{svi}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSviRequest) Reset() {
	*x = GetSviRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSviRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSviRequest) ProtoMessage() {}

func (x *GetSviRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSviRequest.ProtoReflect.Descriptor instead.
func (*GetSviRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{15}
}

func (x *GetSviRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteSviRequest structure
type DeleteSviRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the svi to delete
	// Format: svis/{svi}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, the request will succeed
	// but no action will be taken on the server
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteSviRequest) Reset() {
	*x = DeleteSviRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSviRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSviRequest) ProtoMessage() {}

func (x *DeleteSviRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSviRequest.ProtoReflect.Descriptor instead.
func (*DeleteSviRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSviRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSviRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// UpdateSviRequest structure
type UpdateSviRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object's `name` field is used to identify the object to be updated.
	Svi *Svi `protobuf:"bytes,1,opt,name=svi,proto3" json:"svi,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is not found, a new object will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateSviRequest) Reset() {
	*x = UpdateSviRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSviRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSviRequest) ProtoMessage() {}

func (x *UpdateSviRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSviRequest.ProtoReflect.Descriptor instead.
func (*UpdateSviRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateSviRequest) GetSvi() *Svi {
	if x != nil {
		return x.Svi
	}
	return nil
}

func (x *UpdateSviRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateSviRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

var File_l3_xpu_infra_mgr_proto protoreflect.FileDescriptor

var file_l3_xpu_infra_mgr_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x33, 0x5f, 0x78, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x6d,
	0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x12, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xee, 0x01, 0x0a, 0x03, 0x56, 0x72, 0x66, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x40, 0xea, 0x41, 0x3d, 0x0a, 0x24, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x72, 0x66, 0x12, 0x0a, 0x76, 0x72, 0x66,
	0x73, 0x2f, 0x7b, 0x76, 0x72, 0x66, 0x7d, 0x2a, 0x04, 0x76, 0x72, 0x66, 0x73, 0x32, 0x03, 0x76,
	0x72, 0x66, 0x22, 0xed, 0x01, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x00, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x12, 0x6c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x5a,
	0x0a, 0x0e, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x76, 0x74,
	0x65, 0x70, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76,
	0x6e, 0x69, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x56, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x55, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x52, 0x46, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x03, 0x76, 0x72, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x76, 0x72, 0x66, 0x22, 0x57, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x72, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x75, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x76, 0x72, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x52, 0x04, 0x76, 0x72, 0x66, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x72,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x56, 0x72, 0x66, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x72, 0x66, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x72, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xee, 0x01, 0x0a, 0x03, 0x53, 0x76,
	0x69, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x53,
	0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x76, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x40, 0xea, 0x41, 0x3d, 0x0a, 0x24, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x53, 0x76, 0x69, 0x12, 0x0a, 0x73, 0x76, 0x69, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x69, 0x7d, 0x2a,
	0x04, 0x73, 0x76, 0x69, 0x73, 0x32, 0x03, 0x73, 0x76, 0x69, 0x22, 0xec, 0x02, 0x0a, 0x07, 0x53,
	0x76, 0x69, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x72,
	0x66, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x5d, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x67,
	0x77, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x67, 0x77, 0x49, 0x70, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x67,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x67, 0x70, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x53, 0x76,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x56, 0x49, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x6c, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x76, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x73, 0x76, 0x69, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x03, 0x73, 0x76, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x76, 0x69, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x73, 0x76, 0x69, 0x22, 0x57,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x76, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x73,
	0x76, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e,
	0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69,
	0x52, 0x04, 0x73, 0x76, 0x69, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x76, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x76, 0x69, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x7e, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x76,
	0x69, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x76, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x73, 0x76, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x73, 0x76, 0x69, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x56, 0x52, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x52, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x52, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x56,
	0x52, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x52, 0x46, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x53, 0x56, 0x49,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x56,
	0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x56, 0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x56, 0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x56, 0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x32, 0xbe, 0x05, 0x0a, 0x0a, 0x56, 0x72, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x8a, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x72, 0x66, 0x12, 0x32, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x22, 0x22, 0xda, 0x41, 0x0a, 0x76, 0x72, 0x66,
	0x2c, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x03, 0x76,
	0x72, 0x66, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e,
	0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x72, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x72,
	0x66, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x56, 0x72, 0x66, 0x12, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x56, 0x72, 0x66, 0x22, 0x20, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x76, 0x72, 0x66, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x79, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x72, 0x66, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x72,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x72, 0x66, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x72, 0x66,
	0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x22, 0x34, 0xda, 0x41, 0x0f,
	0x76, 0x72, 0x66, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x03, 0x76, 0x72, 0x66, 0x32, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x76, 0x72, 0x66, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x2a,
	0x7d, 0x32, 0xbe, 0x05, 0x0a, 0x0a, 0x53, 0x76, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x69, 0x12, 0x32,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x22, 0x22, 0xda, 0x41, 0x0a, 0x73, 0x76,
	0x69, 0x2c, 0x73, 0x76, 0x69, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x03,
	0x73, 0x76, 0x69, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x76, 0x69, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x69, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x76, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x76, 0x69, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x76, 0x69, 0x12, 0x2f,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x76, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x22, 0x20, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x73, 0x76, 0x69, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x79, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x76, 0x69, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x76, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x20, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x76, 0x69, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x76,
	0x69, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x76, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x22, 0x34, 0xda, 0x41,
	0x0f, 0x73, 0x76, 0x69, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x03, 0x73, 0x76, 0x69, 0x32, 0x15, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x73, 0x76, 0x69, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x76, 0x69, 0x73, 0x2f,
	0x2a, 0x7d, 0x42, 0x77, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x4c, 0x33, 0x58, 0x70, 0x75, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x4d, 0x67, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_l3_xpu_infra_mgr_proto_rawDescOnce sync.Once
	file_l3_xpu_infra_mgr_proto_rawDescData = file_l3_xpu_infra_mgr_proto_rawDesc
)

func file_l3_xpu_infra_mgr_proto_rawDescGZIP() []byte {
	file_l3_xpu_infra_mgr_proto_rawDescOnce.Do(func() {
		file_l3_xpu_infra_mgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_l3_xpu_infra_mgr_proto_rawDescData)
	})
	return file_l3_xpu_infra_mgr_proto_rawDescData
}

var file_l3_xpu_infra_mgr_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_l3_xpu_infra_mgr_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_l3_xpu_infra_mgr_proto_goTypes = []interface{}{
	(VRFOperStatus)(0),            // 0: opi_api.network.evpn_gw.v1alpha1.VRFOperStatus
	(SVIOperStatus)(0),            // 1: opi_api.network.evpn_gw.v1alpha1.SVIOperStatus
	(*Vrf)(nil),                   // 2: opi_api.network.evpn_gw.v1alpha1.Vrf
	(*VrfSpec)(nil),               // 3: opi_api.network.evpn_gw.v1alpha1.VrfSpec
	(*VrfStatus)(nil),             // 4: opi_api.network.evpn_gw.v1alpha1.VrfStatus
	(*CreateVrfRequest)(nil),      // 5: opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest
	(*ListVrfsRequest)(nil),       // 6: opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest
	(*ListVrfsResponse)(nil),      // 7: opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse
	(*GetVrfRequest)(nil),         // 8: opi_api.network.evpn_gw.v1alpha1.GetVrfRequest
	(*DeleteVrfRequest)(nil),      // 9: opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest
	(*UpdateVrfRequest)(nil),      // 10: opi_api.network.evpn_gw.v1alpha1.UpdateVrfRequest
	(*Svi)(nil),                   // 11: opi_api.network.evpn_gw.v1alpha1.Svi
	(*SviSpec)(nil),               // 12: opi_api.network.evpn_gw.v1alpha1.SviSpec
	(*SviStatus)(nil),             // 13: opi_api.network.evpn_gw.v1alpha1.SviStatus
	(*CreateSviRequest)(nil),      // 14: opi_api.network.evpn_gw.v1alpha1.CreateSviRequest
	(*ListSvisRequest)(nil),       // 15: opi_api.network.evpn_gw.v1alpha1.ListSvisRequest
	(*ListSvisResponse)(nil),      // 16: opi_api.network.evpn_gw.v1alpha1.ListSvisResponse
	(*GetSviRequest)(nil),         // 17: opi_api.network.evpn_gw.v1alpha1.GetSviRequest
	(*DeleteSviRequest)(nil),      // 18: opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest
	(*UpdateSviRequest)(nil),      // 19: opi_api.network.evpn_gw.v1alpha1.UpdateSviRequest
	(*_go.IPPrefix)(nil),          // 20: opi_api.network.opinetcommon.v1alpha1.IPPrefix
	(*Component)(nil),             // 21: opi_api.network.evpn_gw.v1alpha1.Component
	(*fieldmaskpb.FieldMask)(nil), // 22: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),         // 23: google.protobuf.Empty
}
var file_l3_xpu_infra_mgr_proto_depIdxs = []int32{
	3,  // 0: opi_api.network.evpn_gw.v1alpha1.Vrf.spec:type_name -> opi_api.network.evpn_gw.v1alpha1.VrfSpec
	4,  // 1: opi_api.network.evpn_gw.v1alpha1.Vrf.status:type_name -> opi_api.network.evpn_gw.v1alpha1.VrfStatus
	20, // 2: opi_api.network.evpn_gw.v1alpha1.VrfSpec.loopback_ip_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	20, // 3: opi_api.network.evpn_gw.v1alpha1.VrfSpec.vtep_ip_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	0,  // 4: opi_api.network.evpn_gw.v1alpha1.VrfStatus.oper_status:type_name -> opi_api.network.evpn_gw.v1alpha1.VRFOperStatus
	21, // 5: opi_api.network.evpn_gw.v1alpha1.VrfStatus.components:type_name -> opi_api.network.evpn_gw.v1alpha1.Component
	2,  // 6: opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest.vrf:type_name -> opi_api.network.evpn_gw.v1alpha1.Vrf
	2,  // 7: opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.vrfs:type_name -> opi_api.network.evpn_gw.v1alpha1.Vrf
	2,  // 8: opi_api.network.evpn_gw.v1alpha1.UpdateVrfRequest.vrf:type_name -> opi_api.network.evpn_gw.v1alpha1.Vrf
	22, // 9: opi_api.network.evpn_gw.v1alpha1.UpdateVrfRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 10: opi_api.network.evpn_gw.v1alpha1.Svi.spec:type_name -> opi_api.network.evpn_gw.v1alpha1.SviSpec
	13, // 11: opi_api.network.evpn_gw.v1alpha1.Svi.status:type_name -> opi_api.network.evpn_gw.v1alpha1.SviStatus
	20, // 12: opi_api.network.evpn_gw.v1alpha1.SviSpec.gw_ip_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	1,  // 13: opi_api.network.evpn_gw.v1alpha1.SviStatus.oper_status:type_name -> opi_api.network.evpn_gw.v1alpha1.SVIOperStatus
	21, // 14: opi_api.network.evpn_gw.v1alpha1.SviStatus.components:type_name -> opi_api.network.evpn_gw.v1alpha1.Component
	11, // 15: opi_api.network.evpn_gw.v1alpha1.CreateSviRequest.svi:type_name -> opi_api.network.evpn_gw.v1alpha1.Svi
	11, // 16: opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.svis:type_name -> opi_api.network.evpn_gw.v1alpha1.Svi
	11, // 17: opi_api.network.evpn_gw.v1alpha1.UpdateSviRequest.svi:type_name -> opi_api.network.evpn_gw.v1alpha1.Svi
	22, // 18: opi_api.network.evpn_gw.v1alpha1.UpdateSviRequest.update_mask:type_name -> google.protobuf.FieldMask
	5,  // 19: opi_api.network.evpn_gw.v1alpha1.VrfService.CreateVrf:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest
	6,  // 20: opi_api.network.evpn_gw.v1alpha1.VrfService.ListVrfs:input_type -> opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest
	8,  // 21: opi_api.network.evpn_gw.v1alpha1.VrfService.GetVrf:input_type -> opi_api.network.evpn_gw.v1alpha1.GetVrfRequest
	9,  // 22: opi_api.network.evpn_gw.v1alpha1.VrfService.DeleteVrf:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest
	10, // 23: opi_api.network.evpn_gw.v1alpha1.VrfService.UpdateVrf:input_type -> opi_api.network.evpn_gw.v1alpha1.UpdateVrfRequest
	14, // 24: opi_api.network.evpn_gw.v1alpha1.SviService.CreateSvi:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateSviRequest
	15, // 25: opi_api.network.evpn_gw.v1alpha1.SviService.ListSvis:input_type -> opi_api.network.evpn_gw.v1alpha1.ListSvisRequest
	17, // 26: opi_api.network.evpn_gw.v1alpha1.SviService.GetSvi:input_type -> opi_api.network.evpn_gw.v1alpha1.GetSviRequest
	18, // 27: opi_api.network.evpn_gw.v1alpha1.SviService.DeleteSvi:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest
	19, // 28: opi_api.network.evpn_gw.v1alpha1.SviService.UpdateSvi:input_type -> opi_api.network.evpn_gw.v1alpha1.UpdateSviRequest
	2,  // 29: opi_api.network.evpn_gw.v1alpha1.VrfService.CreateVrf:output_type -> opi_api.network.evpn_gw.v1alpha1.Vrf
	7,  // 30: opi_api.network.evpn_gw.v1alpha1.VrfService.ListVrfs:output_type -> opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse
	2,  // 31: opi_api.network.evpn_gw.v1alpha1.VrfService.GetVrf:output_type -> opi_api.network.evpn_gw.v1alpha1.Vrf
	23, // 32: opi_api.network.evpn_gw.v1alpha1.VrfService.DeleteVrf:output_type -> google.protobuf.Empty
	2,  // 33: opi_api.network.evpn_gw.v1alpha1.VrfService.UpdateVrf:output_type -> opi_api.network.evpn_gw.v1alpha1.Vrf
	11, // 34: opi_api.network.evpn_gw.v1alpha1.SviService.CreateSvi:output_type -> opi_api.network.evpn_gw.v1alpha1.Svi
	16, // 35: opi_api.network.evpn_gw.v1alpha1.SviService.ListSvis:output_type -> opi_api.network.evpn_gw.v1alpha1.ListSvisResponse
	11, // 36: opi_api.network.evpn_gw.v1alpha1.SviService.GetSvi:output_type -> opi_api.network.evpn_gw.v1alpha1.Svi
	23, // 37: opi_api.network.evpn_gw.v1alpha1.SviService.DeleteSvi:output_type -> google.protobuf.Empty
	11, // 38: opi_api.network.evpn_gw.v1alpha1.SviService.UpdateSvi:output_type -> opi_api.network.evpn_gw.v1alpha1.Svi
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_l3_xpu_infra_mgr_proto_init() }
func file_l3_xpu_infra_mgr_proto_init() {
	if File_l3_xpu_infra_mgr_proto != nil {
		return
	}
	file_component_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_l3_xpu_infra_mgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vrf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrfSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrfStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVrfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVrfsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVrfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVrfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVrfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVrfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SviSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SviStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSviRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSvisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSvisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSviRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSviRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSviRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_l3_xpu_infra_mgr_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_l3_xpu_infra_mgr_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_l3_xpu_infra_mgr_proto_goTypes,
		DependencyIndexes: file_l3_xpu_infra_mgr_proto_depIdxs,
		EnumInfos:         file_l3_xpu_infra_mgr_proto_enumTypes,
		MessageInfos:      file_l3_xpu_infra_mgr_proto_msgTypes,
	}.Build()
	File_l3_xpu_infra_mgr_proto = out.File
	file_l3_xpu_infra_mgr_proto_rawDesc = nil
	file_l3_xpu_infra_mgr_proto_goTypes = nil
	file_l3_xpu_infra_mgr_proto_depIdxs = nil
}
