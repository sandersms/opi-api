// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.
// Copyright (c) 2024 Ericsson AB.

// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)
// (-- api-linter: core::0216::synonyms=disabled
//     aip.dev/not-precedent: Word "Status" will be used instead of "State". --)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: l3_xpu_infra_mgr.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VrfService_CreateVrf_FullMethodName = "/opi_api.network.evpn_gw.v1alpha1.VrfService/CreateVrf"
	VrfService_ListVrfs_FullMethodName  = "/opi_api.network.evpn_gw.v1alpha1.VrfService/ListVrfs"
	VrfService_GetVrf_FullMethodName    = "/opi_api.network.evpn_gw.v1alpha1.VrfService/GetVrf"
	VrfService_DeleteVrf_FullMethodName = "/opi_api.network.evpn_gw.v1alpha1.VrfService/DeleteVrf"
	VrfService_UpdateVrf_FullMethodName = "/opi_api.network.evpn_gw.v1alpha1.VrfService/UpdateVrf"
)

// VrfServiceClient is the client API for VrfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VrfServiceClient interface {
	// Create a Vrf
	CreateVrf(ctx context.Context, in *CreateVrfRequest, opts ...grpc.CallOption) (*Vrf, error)
	// List Vrfs
	ListVrfs(ctx context.Context, in *ListVrfsRequest, opts ...grpc.CallOption) (*ListVrfsResponse, error)
	// Retrieve a Vrf
	GetVrf(ctx context.Context, in *GetVrfRequest, opts ...grpc.CallOption) (*Vrf, error)
	// Delete a Vrf
	DeleteVrf(ctx context.Context, in *DeleteVrfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update a Vrf
	UpdateVrf(ctx context.Context, in *UpdateVrfRequest, opts ...grpc.CallOption) (*Vrf, error)
}

type vrfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVrfServiceClient(cc grpc.ClientConnInterface) VrfServiceClient {
	return &vrfServiceClient{cc}
}

func (c *vrfServiceClient) CreateVrf(ctx context.Context, in *CreateVrfRequest, opts ...grpc.CallOption) (*Vrf, error) {
	out := new(Vrf)
	err := c.cc.Invoke(ctx, VrfService_CreateVrf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfServiceClient) ListVrfs(ctx context.Context, in *ListVrfsRequest, opts ...grpc.CallOption) (*ListVrfsResponse, error) {
	out := new(ListVrfsResponse)
	err := c.cc.Invoke(ctx, VrfService_ListVrfs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfServiceClient) GetVrf(ctx context.Context, in *GetVrfRequest, opts ...grpc.CallOption) (*Vrf, error) {
	out := new(Vrf)
	err := c.cc.Invoke(ctx, VrfService_GetVrf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfServiceClient) DeleteVrf(ctx context.Context, in *DeleteVrfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VrfService_DeleteVrf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfServiceClient) UpdateVrf(ctx context.Context, in *UpdateVrfRequest, opts ...grpc.CallOption) (*Vrf, error) {
	out := new(Vrf)
	err := c.cc.Invoke(ctx, VrfService_UpdateVrf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VrfServiceServer is the server API for VrfService service.
// All implementations must embed UnimplementedVrfServiceServer
// for forward compatibility
type VrfServiceServer interface {
	// Create a Vrf
	CreateVrf(context.Context, *CreateVrfRequest) (*Vrf, error)
	// List Vrfs
	ListVrfs(context.Context, *ListVrfsRequest) (*ListVrfsResponse, error)
	// Retrieve a Vrf
	GetVrf(context.Context, *GetVrfRequest) (*Vrf, error)
	// Delete a Vrf
	DeleteVrf(context.Context, *DeleteVrfRequest) (*emptypb.Empty, error)
	// Update a Vrf
	UpdateVrf(context.Context, *UpdateVrfRequest) (*Vrf, error)
	mustEmbedUnimplementedVrfServiceServer()
}

// UnimplementedVrfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVrfServiceServer struct {
}

func (UnimplementedVrfServiceServer) CreateVrf(context.Context, *CreateVrfRequest) (*Vrf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVrf not implemented")
}
func (UnimplementedVrfServiceServer) ListVrfs(context.Context, *ListVrfsRequest) (*ListVrfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVrfs not implemented")
}
func (UnimplementedVrfServiceServer) GetVrf(context.Context, *GetVrfRequest) (*Vrf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVrf not implemented")
}
func (UnimplementedVrfServiceServer) DeleteVrf(context.Context, *DeleteVrfRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVrf not implemented")
}
func (UnimplementedVrfServiceServer) UpdateVrf(context.Context, *UpdateVrfRequest) (*Vrf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVrf not implemented")
}
func (UnimplementedVrfServiceServer) mustEmbedUnimplementedVrfServiceServer() {}

// UnsafeVrfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VrfServiceServer will
// result in compilation errors.
type UnsafeVrfServiceServer interface {
	mustEmbedUnimplementedVrfServiceServer()
}

func RegisterVrfServiceServer(s grpc.ServiceRegistrar, srv VrfServiceServer) {
	s.RegisterService(&VrfService_ServiceDesc, srv)
}

func _VrfService_CreateVrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVrfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).CreateVrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VrfService_CreateVrf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).CreateVrf(ctx, req.(*CreateVrfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VrfService_ListVrfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVrfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).ListVrfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VrfService_ListVrfs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).ListVrfs(ctx, req.(*ListVrfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VrfService_GetVrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVrfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).GetVrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VrfService_GetVrf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).GetVrf(ctx, req.(*GetVrfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VrfService_DeleteVrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVrfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).DeleteVrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VrfService_DeleteVrf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).DeleteVrf(ctx, req.(*DeleteVrfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VrfService_UpdateVrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVrfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).UpdateVrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VrfService_UpdateVrf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).UpdateVrf(ctx, req.(*UpdateVrfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VrfService_ServiceDesc is the grpc.ServiceDesc for VrfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VrfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.evpn_gw.v1alpha1.VrfService",
	HandlerType: (*VrfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVrf",
			Handler:    _VrfService_CreateVrf_Handler,
		},
		{
			MethodName: "ListVrfs",
			Handler:    _VrfService_ListVrfs_Handler,
		},
		{
			MethodName: "GetVrf",
			Handler:    _VrfService_GetVrf_Handler,
		},
		{
			MethodName: "DeleteVrf",
			Handler:    _VrfService_DeleteVrf_Handler,
		},
		{
			MethodName: "UpdateVrf",
			Handler:    _VrfService_UpdateVrf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l3_xpu_infra_mgr.proto",
}

const (
	SviService_CreateSvi_FullMethodName = "/opi_api.network.evpn_gw.v1alpha1.SviService/CreateSvi"
	SviService_ListSvis_FullMethodName  = "/opi_api.network.evpn_gw.v1alpha1.SviService/ListSvis"
	SviService_GetSvi_FullMethodName    = "/opi_api.network.evpn_gw.v1alpha1.SviService/GetSvi"
	SviService_DeleteSvi_FullMethodName = "/opi_api.network.evpn_gw.v1alpha1.SviService/DeleteSvi"
	SviService_UpdateSvi_FullMethodName = "/opi_api.network.evpn_gw.v1alpha1.SviService/UpdateSvi"
)

// SviServiceClient is the client API for SviService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SviServiceClient interface {
	// Create a Svi
	CreateSvi(ctx context.Context, in *CreateSviRequest, opts ...grpc.CallOption) (*Svi, error)
	// List Svis
	ListSvis(ctx context.Context, in *ListSvisRequest, opts ...grpc.CallOption) (*ListSvisResponse, error)
	// Retrieve a Svi
	GetSvi(ctx context.Context, in *GetSviRequest, opts ...grpc.CallOption) (*Svi, error)
	// Delete a Svi
	DeleteSvi(ctx context.Context, in *DeleteSviRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update a Svi
	UpdateSvi(ctx context.Context, in *UpdateSviRequest, opts ...grpc.CallOption) (*Svi, error)
}

type sviServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSviServiceClient(cc grpc.ClientConnInterface) SviServiceClient {
	return &sviServiceClient{cc}
}

func (c *sviServiceClient) CreateSvi(ctx context.Context, in *CreateSviRequest, opts ...grpc.CallOption) (*Svi, error) {
	out := new(Svi)
	err := c.cc.Invoke(ctx, SviService_CreateSvi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sviServiceClient) ListSvis(ctx context.Context, in *ListSvisRequest, opts ...grpc.CallOption) (*ListSvisResponse, error) {
	out := new(ListSvisResponse)
	err := c.cc.Invoke(ctx, SviService_ListSvis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sviServiceClient) GetSvi(ctx context.Context, in *GetSviRequest, opts ...grpc.CallOption) (*Svi, error) {
	out := new(Svi)
	err := c.cc.Invoke(ctx, SviService_GetSvi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sviServiceClient) DeleteSvi(ctx context.Context, in *DeleteSviRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SviService_DeleteSvi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sviServiceClient) UpdateSvi(ctx context.Context, in *UpdateSviRequest, opts ...grpc.CallOption) (*Svi, error) {
	out := new(Svi)
	err := c.cc.Invoke(ctx, SviService_UpdateSvi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SviServiceServer is the server API for SviService service.
// All implementations must embed UnimplementedSviServiceServer
// for forward compatibility
type SviServiceServer interface {
	// Create a Svi
	CreateSvi(context.Context, *CreateSviRequest) (*Svi, error)
	// List Svis
	ListSvis(context.Context, *ListSvisRequest) (*ListSvisResponse, error)
	// Retrieve a Svi
	GetSvi(context.Context, *GetSviRequest) (*Svi, error)
	// Delete a Svi
	DeleteSvi(context.Context, *DeleteSviRequest) (*emptypb.Empty, error)
	// Update a Svi
	UpdateSvi(context.Context, *UpdateSviRequest) (*Svi, error)
	mustEmbedUnimplementedSviServiceServer()
}

// UnimplementedSviServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSviServiceServer struct {
}

func (UnimplementedSviServiceServer) CreateSvi(context.Context, *CreateSviRequest) (*Svi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSvi not implemented")
}
func (UnimplementedSviServiceServer) ListSvis(context.Context, *ListSvisRequest) (*ListSvisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSvis not implemented")
}
func (UnimplementedSviServiceServer) GetSvi(context.Context, *GetSviRequest) (*Svi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSvi not implemented")
}
func (UnimplementedSviServiceServer) DeleteSvi(context.Context, *DeleteSviRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSvi not implemented")
}
func (UnimplementedSviServiceServer) UpdateSvi(context.Context, *UpdateSviRequest) (*Svi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSvi not implemented")
}
func (UnimplementedSviServiceServer) mustEmbedUnimplementedSviServiceServer() {}

// UnsafeSviServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SviServiceServer will
// result in compilation errors.
type UnsafeSviServiceServer interface {
	mustEmbedUnimplementedSviServiceServer()
}

func RegisterSviServiceServer(s grpc.ServiceRegistrar, srv SviServiceServer) {
	s.RegisterService(&SviService_ServiceDesc, srv)
}

func _SviService_CreateSvi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSviRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).CreateSvi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SviService_CreateSvi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).CreateSvi(ctx, req.(*CreateSviRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SviService_ListSvis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSvisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).ListSvis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SviService_ListSvis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).ListSvis(ctx, req.(*ListSvisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SviService_GetSvi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSviRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).GetSvi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SviService_GetSvi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).GetSvi(ctx, req.(*GetSviRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SviService_DeleteSvi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSviRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).DeleteSvi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SviService_DeleteSvi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).DeleteSvi(ctx, req.(*DeleteSviRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SviService_UpdateSvi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSviRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).UpdateSvi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SviService_UpdateSvi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).UpdateSvi(ctx, req.(*UpdateSviRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SviService_ServiceDesc is the grpc.ServiceDesc for SviService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SviService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.evpn_gw.v1alpha1.SviService",
	HandlerType: (*SviServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSvi",
			Handler:    _SviService_CreateSvi_Handler,
		},
		{
			MethodName: "ListSvis",
			Handler:    _SviService_ListSvis_Handler,
		},
		{
			MethodName: "GetSvi",
			Handler:    _SviService_GetSvi_Handler,
		},
		{
			MethodName: "DeleteSvi",
			Handler:    _SviService_DeleteSvi_Handler,
		},
		{
			MethodName: "UpdateSvi",
			Handler:    _SviService_UpdateSvi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l3_xpu_infra_mgr.proto",
}
