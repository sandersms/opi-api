// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2023-2024 Dell Inc, or its subsidiaries.
//
// Derived from the OpenConfig interfaces model github.com/openconfig/public/release/models/interfaces
//
// (-- api-linter: core::0141::forbidden-types=disabled
//     aip.dev/not-precedent: counters, mtu, index must be uint and not int. --)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: networkinterfaces.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetInterfaceService_GetNetInterface_FullMethodName    = "/opi_api.network.opinetcommon.v1alpha1.NetInterfaceService/GetNetInterface"
	NetInterfaceService_ListNetInterfaces_FullMethodName  = "/opi_api.network.opinetcommon.v1alpha1.NetInterfaceService/ListNetInterfaces"
	NetInterfaceService_UpdateNetInterface_FullMethodName = "/opi_api.network.opinetcommon.v1alpha1.NetInterfaceService/UpdateNetInterface"
)

// NetInterfaceServiceClient is the client API for NetInterfaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetInterfaceServiceClient interface {
	// Retrieves the interface information for a given interface
	GetNetInterface(ctx context.Context, in *GetNetInterfaceRequest, opts ...grpc.CallOption) (*NetInterface, error)
	// Retrieves the set of interfaces on the device
	ListNetInterfaces(ctx context.Context, in *ListNetInterfacesRequest, opts ...grpc.CallOption) (*ListNetInterfacesResponse, error)
	// A method for setting or changing configuration of an interface
	UpdateNetInterface(ctx context.Context, in *UpdateNetInterfaceRequest, opts ...grpc.CallOption) (*NetInterface, error)
}

type netInterfaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetInterfaceServiceClient(cc grpc.ClientConnInterface) NetInterfaceServiceClient {
	return &netInterfaceServiceClient{cc}
}

func (c *netInterfaceServiceClient) GetNetInterface(ctx context.Context, in *GetNetInterfaceRequest, opts ...grpc.CallOption) (*NetInterface, error) {
	out := new(NetInterface)
	err := c.cc.Invoke(ctx, NetInterfaceService_GetNetInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netInterfaceServiceClient) ListNetInterfaces(ctx context.Context, in *ListNetInterfacesRequest, opts ...grpc.CallOption) (*ListNetInterfacesResponse, error) {
	out := new(ListNetInterfacesResponse)
	err := c.cc.Invoke(ctx, NetInterfaceService_ListNetInterfaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netInterfaceServiceClient) UpdateNetInterface(ctx context.Context, in *UpdateNetInterfaceRequest, opts ...grpc.CallOption) (*NetInterface, error) {
	out := new(NetInterface)
	err := c.cc.Invoke(ctx, NetInterfaceService_UpdateNetInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetInterfaceServiceServer is the server API for NetInterfaceService service.
// All implementations must embed UnimplementedNetInterfaceServiceServer
// for forward compatibility
type NetInterfaceServiceServer interface {
	// Retrieves the interface information for a given interface
	GetNetInterface(context.Context, *GetNetInterfaceRequest) (*NetInterface, error)
	// Retrieves the set of interfaces on the device
	ListNetInterfaces(context.Context, *ListNetInterfacesRequest) (*ListNetInterfacesResponse, error)
	// A method for setting or changing configuration of an interface
	UpdateNetInterface(context.Context, *UpdateNetInterfaceRequest) (*NetInterface, error)
	mustEmbedUnimplementedNetInterfaceServiceServer()
}

// UnimplementedNetInterfaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetInterfaceServiceServer struct {
}

func (UnimplementedNetInterfaceServiceServer) GetNetInterface(context.Context, *GetNetInterfaceRequest) (*NetInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetInterface not implemented")
}
func (UnimplementedNetInterfaceServiceServer) ListNetInterfaces(context.Context, *ListNetInterfacesRequest) (*ListNetInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetInterfaces not implemented")
}
func (UnimplementedNetInterfaceServiceServer) UpdateNetInterface(context.Context, *UpdateNetInterfaceRequest) (*NetInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetInterface not implemented")
}
func (UnimplementedNetInterfaceServiceServer) mustEmbedUnimplementedNetInterfaceServiceServer() {}

// UnsafeNetInterfaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetInterfaceServiceServer will
// result in compilation errors.
type UnsafeNetInterfaceServiceServer interface {
	mustEmbedUnimplementedNetInterfaceServiceServer()
}

func RegisterNetInterfaceServiceServer(s grpc.ServiceRegistrar, srv NetInterfaceServiceServer) {
	s.RegisterService(&NetInterfaceService_ServiceDesc, srv)
}

func _NetInterfaceService_GetNetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetInterfaceServiceServer).GetNetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetInterfaceService_GetNetInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetInterfaceServiceServer).GetNetInterface(ctx, req.(*GetNetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetInterfaceService_ListNetInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetInterfaceServiceServer).ListNetInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetInterfaceService_ListNetInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetInterfaceServiceServer).ListNetInterfaces(ctx, req.(*ListNetInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetInterfaceService_UpdateNetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetInterfaceServiceServer).UpdateNetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetInterfaceService_UpdateNetInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetInterfaceServiceServer).UpdateNetInterface(ctx, req.(*UpdateNetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetInterfaceService_ServiceDesc is the grpc.ServiceDesc for NetInterfaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetInterfaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.opinetcommon.v1alpha1.NetInterfaceService",
	HandlerType: (*NetInterfaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetInterface",
			Handler:    _NetInterfaceService_GetNetInterface_Handler,
		},
		{
			MethodName: "ListNetInterfaces",
			Handler:    _NetInterfaceService_ListNetInterfaces_Handler,
		},
		{
			MethodName: "UpdateNetInterface",
			Handler:    _NetInterfaceService_UpdateNetInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkinterfaces.proto",
}
