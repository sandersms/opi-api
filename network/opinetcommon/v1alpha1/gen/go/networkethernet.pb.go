// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2024 Dell Inc, or its subsidiaries.
//
// Derived from the OpenConfig interfaces model github.com/openconfig/public/release/models/interfaces
//
// (-- api-linter: core::0141::forbidden-types=disabled
//     aip.dev/not-precedent: counters, mtu, index must be uint and not int. --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: networkethernet.proto

package _go

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ethernet Duplex Mode Definitions
type EthDuplexMode int32

const (
	// Unspecified - interface will negotiate duplex speed directly
	EthDuplexMode_ETH_DUPLEX_MODE_UNSPECIFIED EthDuplexMode = 0
	// Specify Full Duplex mode in autonegotiation
	EthDuplexMode_ETH_DUPLEX_MODE_FULL EthDuplexMode = 1
	// Specify Half Duplex mode in autonegotiation
	EthDuplexMode_ETH_DUPLEX_MODE_HALF EthDuplexMode = 2
)

// Enum value maps for EthDuplexMode.
var (
	EthDuplexMode_name = map[int32]string{
		0: "ETH_DUPLEX_MODE_UNSPECIFIED",
		1: "ETH_DUPLEX_MODE_FULL",
		2: "ETH_DUPLEX_MODE_HALF",
	}
	EthDuplexMode_value = map[string]int32{
		"ETH_DUPLEX_MODE_UNSPECIFIED": 0,
		"ETH_DUPLEX_MODE_FULL":        1,
		"ETH_DUPLEX_MODE_HALF":        2,
	}
)

func (x EthDuplexMode) Enum() *EthDuplexMode {
	p := new(EthDuplexMode)
	*p = x
	return p
}

func (x EthDuplexMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthDuplexMode) Descriptor() protoreflect.EnumDescriptor {
	return file_networkethernet_proto_enumTypes[0].Descriptor()
}

func (EthDuplexMode) Type() protoreflect.EnumType {
	return &file_networkethernet_proto_enumTypes[0]
}

func (x EthDuplexMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthDuplexMode.Descriptor instead.
func (EthDuplexMode) EnumDescriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{0}
}

// Ethernet Port Speed Definitions
type EthPortSpeed int32

const (
	// Unspecified - interface will negotiate port speed with the peer interface
	EthPortSpeed_ETH_PORT_SPEED_UNSPECIFIED EthPortSpeed = 0
	// 10M port speed
	EthPortSpeed_ETH_PORT_SPEED_10M EthPortSpeed = 1
	// 100M port speed
	EthPortSpeed_ETH_PORT_SPEED_100M EthPortSpeed = 2
	// 1G port speed
	EthPortSpeed_ETH_PORT_SPEED_1G EthPortSpeed = 3
	// 2.5G port speed
	EthPortSpeed_ETH_PORT_SPEED_2500M EthPortSpeed = 4
	// 5G port speed
	EthPortSpeed_ETH_PORT_SPEED_5G EthPortSpeed = 5
	// 10G port speed
	EthPortSpeed_ETH_PORT_SPEED_10G EthPortSpeed = 6
	// 25G port speed
	EthPortSpeed_ETH_PORT_SPEED_25G EthPortSpeed = 7
	// 40G port speed
	EthPortSpeed_ETH_PORT_SPEED_40G EthPortSpeed = 8
	// 50G port speed
	EthPortSpeed_ETH_PORT_SPEED_50G EthPortSpeed = 9
	// 100G port speed
	EthPortSpeed_ETH_PORT_SPEED_100G EthPortSpeed = 10
	// 200G port speed
	EthPortSpeed_ETH_PORT_SPEED_200G EthPortSpeed = 11
	// 400G port speed
	EthPortSpeed_ETH_PORT_SPEED_400G EthPortSpeed = 12
	// 600G port speed
	EthPortSpeed_ETH_PORT_SPEED_600G EthPortSpeed = 13
	// 800G port speed
	EthPortSpeed_ETH_PORT_SPEED_800G EthPortSpeed = 14
	// Interface speed is unknown.  Systems may report
	// speed UNKNOWN when an interface is down or unpopuplated
	EthPortSpeed_ETH_PORT_SPEED_UNKNOWN EthPortSpeed = 15
)

// Enum value maps for EthPortSpeed.
var (
	EthPortSpeed_name = map[int32]string{
		0:  "ETH_PORT_SPEED_UNSPECIFIED",
		1:  "ETH_PORT_SPEED_10M",
		2:  "ETH_PORT_SPEED_100M",
		3:  "ETH_PORT_SPEED_1G",
		4:  "ETH_PORT_SPEED_2500M",
		5:  "ETH_PORT_SPEED_5G",
		6:  "ETH_PORT_SPEED_10G",
		7:  "ETH_PORT_SPEED_25G",
		8:  "ETH_PORT_SPEED_40G",
		9:  "ETH_PORT_SPEED_50G",
		10: "ETH_PORT_SPEED_100G",
		11: "ETH_PORT_SPEED_200G",
		12: "ETH_PORT_SPEED_400G",
		13: "ETH_PORT_SPEED_600G",
		14: "ETH_PORT_SPEED_800G",
		15: "ETH_PORT_SPEED_UNKNOWN",
	}
	EthPortSpeed_value = map[string]int32{
		"ETH_PORT_SPEED_UNSPECIFIED": 0,
		"ETH_PORT_SPEED_10M":         1,
		"ETH_PORT_SPEED_100M":        2,
		"ETH_PORT_SPEED_1G":          3,
		"ETH_PORT_SPEED_2500M":       4,
		"ETH_PORT_SPEED_5G":          5,
		"ETH_PORT_SPEED_10G":         6,
		"ETH_PORT_SPEED_25G":         7,
		"ETH_PORT_SPEED_40G":         8,
		"ETH_PORT_SPEED_50G":         9,
		"ETH_PORT_SPEED_100G":        10,
		"ETH_PORT_SPEED_200G":        11,
		"ETH_PORT_SPEED_400G":        12,
		"ETH_PORT_SPEED_600G":        13,
		"ETH_PORT_SPEED_800G":        14,
		"ETH_PORT_SPEED_UNKNOWN":     15,
	}
)

func (x EthPortSpeed) Enum() *EthPortSpeed {
	p := new(EthPortSpeed)
	*p = x
	return p
}

func (x EthPortSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthPortSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_networkethernet_proto_enumTypes[1].Descriptor()
}

func (EthPortSpeed) Type() protoreflect.EnumType {
	return &file_networkethernet_proto_enumTypes[1]
}

func (x EthPortSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthPortSpeed.Descriptor instead.
func (EthPortSpeed) EnumDescriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{1}
}

// Ethernet Forward Error Correction Mode Definitions
type EthFecMode int32

const (
	// Unspecified
	EthFecMode_ETH_FEC_MODE_UNSPECIFIED EthFecMode = 0
	// Firecode for NRZ channels with less then 100G
	EthFecMode_ETH_FEC_MODE_FC EthFecMode = 1
	// RS528 is used for channels with NRZ modulation. This FEC is designed to
	// comply with IEEE 802.3, Clause 91.
	EthFecMode_ETH_FEC_MODE_RS528 EthFecMode = 2
	// RS544 is used for channels with PAM4 modulation
	EthFecMode_ETH_FEC_MODE_RS544 EthFecMode = 3
	// RS544-2x-interleave is used for channels with PAM4 modulation
	EthFecMode_ETH_FEC_MODE_RS544_2X_INTERLEAVE EthFecMode = 4
	// FEC is administratively disabled
	EthFecMode_ETH_FEC_MODE_DISABLED EthFecMode = 5
)

// Enum value maps for EthFecMode.
var (
	EthFecMode_name = map[int32]string{
		0: "ETH_FEC_MODE_UNSPECIFIED",
		1: "ETH_FEC_MODE_FC",
		2: "ETH_FEC_MODE_RS528",
		3: "ETH_FEC_MODE_RS544",
		4: "ETH_FEC_MODE_RS544_2X_INTERLEAVE",
		5: "ETH_FEC_MODE_DISABLED",
	}
	EthFecMode_value = map[string]int32{
		"ETH_FEC_MODE_UNSPECIFIED":         0,
		"ETH_FEC_MODE_FC":                  1,
		"ETH_FEC_MODE_RS528":               2,
		"ETH_FEC_MODE_RS544":               3,
		"ETH_FEC_MODE_RS544_2X_INTERLEAVE": 4,
		"ETH_FEC_MODE_DISABLED":            5,
	}
)

func (x EthFecMode) Enum() *EthFecMode {
	p := new(EthFecMode)
	*p = x
	return p
}

func (x EthFecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthFecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_networkethernet_proto_enumTypes[2].Descriptor()
}

func (EthFecMode) Type() protoreflect.EnumType {
	return &file_networkethernet_proto_enumTypes[2]
}

func (x EthFecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthFecMode.Descriptor instead.
func (EthFecMode) EnumDescriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{2}
}

// Ethernet Configuration
type EthernetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address to assign to the Ethernet Interface if not assigned
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Set to TRUE to request autonegotiate the transmission parameters
	// with the peer interface
	AutoNegotiate bool `protobuf:"varint,2,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	// Used when full autonegotiation is not desired by setting to TRUE
	// and setting auto_negotiate to FALSE.  It is ignored when auto-negotiate
	// is set to TRUE.
	StandaloneLinkTraining bool `protobuf:"varint,3,opt,name=standalone_link_training,json=standaloneLinkTraining,proto3" json:"standalone_link_training,omitempty"`
	// Optionally sets the duplex mode that is advertised to the peer interface
	DuplexMode EthDuplexMode `protobuf:"varint,4,opt,name=duplex_mode,json=duplexMode,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthDuplexMode" json:"duplex_mode,omitempty"`
	// Optionally sets the port speed that is advertised to the peer interface
	PortSpeed EthPortSpeed `protobuf:"varint,5,opt,name=port_speed,json=portSpeed,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthPortSpeed" json:"port_speed,omitempty"`
	// Override for the negotiated flow control on the interface
	EnableFlowControl bool `protobuf:"varint,6,opt,name=enable_flow_control,json=enableFlowControl,proto3" json:"enable_flow_control,omitempty"`
	// FEC applied to the physical channel of the interface
	FecMode EthFecMode `protobuf:"varint,7,opt,name=fec_mode,json=fecMode,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthFecMode" json:"fec_mode,omitempty"`
}

func (x *EthernetConfig) Reset() {
	*x = EthernetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkethernet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetConfig) ProtoMessage() {}

func (x *EthernetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networkethernet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetConfig.ProtoReflect.Descriptor instead.
func (*EthernetConfig) Descriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{0}
}

func (x *EthernetConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EthernetConfig) GetAutoNegotiate() bool {
	if x != nil {
		return x.AutoNegotiate
	}
	return false
}

func (x *EthernetConfig) GetStandaloneLinkTraining() bool {
	if x != nil {
		return x.StandaloneLinkTraining
	}
	return false
}

func (x *EthernetConfig) GetDuplexMode() EthDuplexMode {
	if x != nil {
		return x.DuplexMode
	}
	return EthDuplexMode_ETH_DUPLEX_MODE_UNSPECIFIED
}

func (x *EthernetConfig) GetPortSpeed() EthPortSpeed {
	if x != nil {
		return x.PortSpeed
	}
	return EthPortSpeed_ETH_PORT_SPEED_UNSPECIFIED
}

func (x *EthernetConfig) GetEnableFlowControl() bool {
	if x != nil {
		return x.EnableFlowControl
	}
	return false
}

func (x *EthernetConfig) GetFecMode() EthFecMode {
	if x != nil {
		return x.FecMode
	}
	return EthFecMode_ETH_FEC_MODE_UNSPECIFIED
}

// Ethernet receive frame distribution counters
type EthernetInDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Receive counter for 64 byte frames
	RxFramesOctets64 uint64 `protobuf:"varint,1,opt,name=rx_frames_octets64,json=rxFramesOctets64,proto3" json:"rx_frames_octets64,omitempty"`
	// Receive counter for 65 to 127 byte frames
	RxFramesOctets65To127 uint64 `protobuf:"varint,2,opt,name=rx_frames_octets65_to127,json=rxFramesOctets65To127,proto3" json:"rx_frames_octets65_to127,omitempty"`
	// Receive counter for 128 to 255 byte frames
	RxFramesOctets128To255 uint64 `protobuf:"varint,3,opt,name=rx_frames_octets128_to255,json=rxFramesOctets128To255,proto3" json:"rx_frames_octets128_to255,omitempty"`
	// receive counter for 256 to 511 byte frames
	RxFramesOctets256To511 uint64 `protobuf:"varint,4,opt,name=rx_frames_octets256_to511,json=rxFramesOctets256To511,proto3" json:"rx_frames_octets256_to511,omitempty"`
	// receive counter for 512 to 1023 byte frames
	RxFramesOctets512To1023 uint64 `protobuf:"varint,5,opt,name=rx_frames_octets512_to1023,json=rxFramesOctets512To1023,proto3" json:"rx_frames_octets512_to1023,omitempty"`
	// receive counter for 1024 to 1518 byte frames
	RxFramesOctets1024To1518 uint64 `protobuf:"varint,6,opt,name=rx_frames_octets1024_to1518,json=rxFramesOctets1024To1518,proto3" json:"rx_frames_octets1024_to1518,omitempty"`
}

func (x *EthernetInDistribution) Reset() {
	*x = EthernetInDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkethernet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetInDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetInDistribution) ProtoMessage() {}

func (x *EthernetInDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_networkethernet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetInDistribution.ProtoReflect.Descriptor instead.
func (*EthernetInDistribution) Descriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{1}
}

func (x *EthernetInDistribution) GetRxFramesOctets64() uint64 {
	if x != nil {
		return x.RxFramesOctets64
	}
	return 0
}

func (x *EthernetInDistribution) GetRxFramesOctets65To127() uint64 {
	if x != nil {
		return x.RxFramesOctets65To127
	}
	return 0
}

func (x *EthernetInDistribution) GetRxFramesOctets128To255() uint64 {
	if x != nil {
		return x.RxFramesOctets128To255
	}
	return 0
}

func (x *EthernetInDistribution) GetRxFramesOctets256To511() uint64 {
	if x != nil {
		return x.RxFramesOctets256To511
	}
	return 0
}

func (x *EthernetInDistribution) GetRxFramesOctets512To1023() uint64 {
	if x != nil {
		return x.RxFramesOctets512To1023
	}
	return 0
}

func (x *EthernetInDistribution) GetRxFramesOctets1024To1518() uint64 {
	if x != nil {
		return x.RxFramesOctets1024To1518
	}
	return 0
}

// Ethernet Interface Counters
type EthernetCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// received mac control frame counter
	RxMacControlFrames uint64 `protobuf:"varint,1,opt,name=rx_mac_control_frames,json=rxMacControlFrames,proto3" json:"rx_mac_control_frames,omitempty"`
	// received mac pause frame counter
	RxMacPauseFrames uint64 `protobuf:"varint,2,opt,name=rx_mac_pause_frames,json=rxMacPauseFrames,proto3" json:"rx_mac_pause_frames,omitempty"`
	// frames received that were oversized on the interface
	// (larger then 1518 octets)
	RxOversizeFrames uint64 `protobuf:"varint,3,opt,name=rx_oversize_frames,json=rxOversizeFrames,proto3" json:"rx_oversize_frames,omitempty"`
	// frames received that were undersized on the interface
	// (smaller then 64 octets)
	RxUndersizeFrames uint64 `protobuf:"varint,4,opt,name=rx_undersize_frames,json=rxUndersizeFrames,proto3" json:"rx_undersize_frames,omitempty"`
	// Number of jabber frames received on the interface.
	// Jabber frames are typically defined as oversize frames which also
	// have a bad CRC
	RxJabberFrames uint64 `protobuf:"varint,5,opt,name=rx_jabber_frames,json=rxJabberFrames,proto3" json:"rx_jabber_frames,omitempty"`
	// The total number of frames received that were less than 64 octets
	// in length (excluding framing bits but including FCS octets)
	// and had either a bad Frame Check Sequence (FCS) with an integral
	// number of octets (FCS Error) or a bad FCS with a non-integral number
	// of octets (Alignment Error)
	RxFragmentFrames uint64 `protobuf:"varint,6,opt,name=rx_fragment_frames,json=rxFragmentFrames,proto3" json:"rx_fragment_frames,omitempty"`
	// Number of 802.1q tagged frames received on the interface
	RxIeee8021QFrames uint64 `protobuf:"varint,7,opt,name=rx_ieee8021q_frames,json=rxIeee8021qFrames,proto3" json:"rx_ieee8021q_frames,omitempty"`
	// The total number of frames received that had FCS errors
	RxCrcErrors uint64 `protobuf:"varint,8,opt,name=rx_crc_errors,json=rxCrcErrors,proto3" json:"rx_crc_errors,omitempty"`
	// The number of received errored blocks
	RxBlockErrors uint64 `protobuf:"varint,9,opt,name=rx_block_errors,json=rxBlockErrors,proto3" json:"rx_block_errors,omitempty"`
	// The number of received errored frames due to a carrier issue
	RxCarrierErrors uint64 `protobuf:"varint,10,opt,name=rx_carrier_errors,json=rxCarrierErrors,proto3" json:"rx_carrier_errors,omitempty"`
	// The number of received errored frames due to interrupted transmission
	// issue
	RxInterruptedTx uint64 `protobuf:"varint,11,opt,name=rx_interrupted_tx,json=rxInterruptedTx,proto3" json:"rx_interrupted_tx,omitempty"`
	// The number of received errored frames due to late collision issue
	RxLateCollision uint64 `protobuf:"varint,12,opt,name=rx_late_collision,json=rxLateCollision,proto3" json:"rx_late_collision,omitempty"`
	// The number of received errored frames due to MAC errors received
	RxMacErrorsRx uint64 `protobuf:"varint,13,opt,name=rx_mac_errors_rx,json=rxMacErrorsRx,proto3" json:"rx_mac_errors_rx,omitempty"`
	// The number of received errored frames due to single collision issue
	RxSingleCollision uint64 `protobuf:"varint,14,opt,name=rx_single_collision,json=rxSingleCollision,proto3" json:"rx_single_collision,omitempty"`
	// The number of received errored frames due to symbol error
	RxSymbolError uint64 `protobuf:"varint,15,opt,name=rx_symbol_error,json=rxSymbolError,proto3" json:"rx_symbol_error,omitempty"`
	// The total number frames received that are well-formed but dropped due
	// to exceeding the maximum frame size on the interface
	RxMaxsizeExceeded uint64 `protobuf:"varint,16,opt,name=rx_maxsize_exceeded,json=rxMaxsizeExceeded,proto3" json:"rx_maxsize_exceeded,omitempty"`
	// MAC layer control frames sent on the interface
	OutMacControlFrames uint64 `protobuf:"varint,17,opt,name=out_mac_control_frames,json=outMacControlFrames,proto3" json:"out_mac_control_frames,omitempty"`
	// MAC layer PAUSE frames sent on the interface
	OutMacPauseFrames uint64 `protobuf:"varint,18,opt,name=out_mac_pause_frames,json=outMacPauseFrames,proto3" json:"out_mac_pause_frames,omitempty"`
	// Number of 802.1q tagged frames sent on the interface
	OutIeee8021QFrames uint64 `protobuf:"varint,19,opt,name=out_ieee8021q_frames,json=outIeee8021qFrames,proto3" json:"out_ieee8021q_frames,omitempty"`
	// The number of sent errored frames due to MAC errors transmitted
	OutMacErrorsTx uint64 `protobuf:"varint,20,opt,name=out_mac_errors_tx,json=outMacErrorsTx,proto3" json:"out_mac_errors_tx,omitempty"`
	// Receive Frame Distribution counters
	EthRxDistribution *EthernetInDistribution `protobuf:"bytes,21,opt,name=eth_rx_distribution,json=ethRxDistribution,proto3" json:"eth_rx_distribution,omitempty"`
}

func (x *EthernetCounters) Reset() {
	*x = EthernetCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkethernet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetCounters) ProtoMessage() {}

func (x *EthernetCounters) ProtoReflect() protoreflect.Message {
	mi := &file_networkethernet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetCounters.ProtoReflect.Descriptor instead.
func (*EthernetCounters) Descriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{2}
}

func (x *EthernetCounters) GetRxMacControlFrames() uint64 {
	if x != nil {
		return x.RxMacControlFrames
	}
	return 0
}

func (x *EthernetCounters) GetRxMacPauseFrames() uint64 {
	if x != nil {
		return x.RxMacPauseFrames
	}
	return 0
}

func (x *EthernetCounters) GetRxOversizeFrames() uint64 {
	if x != nil {
		return x.RxOversizeFrames
	}
	return 0
}

func (x *EthernetCounters) GetRxUndersizeFrames() uint64 {
	if x != nil {
		return x.RxUndersizeFrames
	}
	return 0
}

func (x *EthernetCounters) GetRxJabberFrames() uint64 {
	if x != nil {
		return x.RxJabberFrames
	}
	return 0
}

func (x *EthernetCounters) GetRxFragmentFrames() uint64 {
	if x != nil {
		return x.RxFragmentFrames
	}
	return 0
}

func (x *EthernetCounters) GetRxIeee8021QFrames() uint64 {
	if x != nil {
		return x.RxIeee8021QFrames
	}
	return 0
}

func (x *EthernetCounters) GetRxCrcErrors() uint64 {
	if x != nil {
		return x.RxCrcErrors
	}
	return 0
}

func (x *EthernetCounters) GetRxBlockErrors() uint64 {
	if x != nil {
		return x.RxBlockErrors
	}
	return 0
}

func (x *EthernetCounters) GetRxCarrierErrors() uint64 {
	if x != nil {
		return x.RxCarrierErrors
	}
	return 0
}

func (x *EthernetCounters) GetRxInterruptedTx() uint64 {
	if x != nil {
		return x.RxInterruptedTx
	}
	return 0
}

func (x *EthernetCounters) GetRxLateCollision() uint64 {
	if x != nil {
		return x.RxLateCollision
	}
	return 0
}

func (x *EthernetCounters) GetRxMacErrorsRx() uint64 {
	if x != nil {
		return x.RxMacErrorsRx
	}
	return 0
}

func (x *EthernetCounters) GetRxSingleCollision() uint64 {
	if x != nil {
		return x.RxSingleCollision
	}
	return 0
}

func (x *EthernetCounters) GetRxSymbolError() uint64 {
	if x != nil {
		return x.RxSymbolError
	}
	return 0
}

func (x *EthernetCounters) GetRxMaxsizeExceeded() uint64 {
	if x != nil {
		return x.RxMaxsizeExceeded
	}
	return 0
}

func (x *EthernetCounters) GetOutMacControlFrames() uint64 {
	if x != nil {
		return x.OutMacControlFrames
	}
	return 0
}

func (x *EthernetCounters) GetOutMacPauseFrames() uint64 {
	if x != nil {
		return x.OutMacPauseFrames
	}
	return 0
}

func (x *EthernetCounters) GetOutIeee8021QFrames() uint64 {
	if x != nil {
		return x.OutIeee8021QFrames
	}
	return 0
}

func (x *EthernetCounters) GetOutMacErrorsTx() uint64 {
	if x != nil {
		return x.OutMacErrorsTx
	}
	return 0
}

func (x *EthernetCounters) GetEthRxDistribution() *EthernetInDistribution {
	if x != nil {
		return x.EthRxDistribution
	}
	return nil
}

// Ethernet interface state settings
type EthernetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address to assign to the Ethernet Interface if not assigned or
	// being overridden.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Set to TRUE to request autonegotiate the transmission parameters
	// with the peer interface
	AutoNegotiate bool `protobuf:"varint,2,opt,name=auto_negotiate,json=autoNegotiate,proto3" json:"auto_negotiate,omitempty"`
	// Used when full autonegotiation is not desired by setting to TRUE
	// and setting auto_negotiate to FALSE.  It is ignored when auto-negotiate
	// is set to TRUE.
	StandaloneLinkTraining bool `protobuf:"varint,3,opt,name=standalone_link_training,json=standaloneLinkTraining,proto3" json:"standalone_link_training,omitempty"`
	// The duplex mode that is negotiated or set interface
	DuplexMode EthDuplexMode `protobuf:"varint,4,opt,name=duplex_mode,json=duplexMode,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthDuplexMode" json:"duplex_mode,omitempty"`
	// The port speed that is negotiated or set for the interface
	PortSpeed EthPortSpeed `protobuf:"varint,5,opt,name=port_speed,json=portSpeed,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthPortSpeed" json:"port_speed,omitempty"`
	// Override for the negotiated flow control on the interface
	EnableFlowControl bool `protobuf:"varint,6,opt,name=enable_flow_control,json=enableFlowControl,proto3" json:"enable_flow_control,omitempty"`
	// FEC applied to the physical channel of the interface
	FecMode EthFecMode `protobuf:"varint,7,opt,name=fec_mode,json=fecMode,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthFecMode" json:"fec_mode,omitempty"`
	// Hardware MAC address defined for the interface
	HwMacAddress string `protobuf:"bytes,8,opt,name=hw_mac_address,json=hwMacAddress,proto3" json:"hw_mac_address,omitempty"`
	// Negotiated Duplex mode for the interface
	NegotiatedDuplexMode EthDuplexMode `protobuf:"varint,9,opt,name=negotiated_duplex_mode,json=negotiatedDuplexMode,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthDuplexMode" json:"negotiated_duplex_mode,omitempty"`
	// Negotiated Port Speed for the interface
	NegotiatedPortSpeed EthPortSpeed `protobuf:"varint,10,opt,name=negotiated_port_speed,json=negotiatedPortSpeed,proto3,enum=opi_api.network.opinetcommon.v1alpha1.EthPortSpeed" json:"negotiated_port_speed,omitempty"`
	// Ethernet port counters
	Counters *EthernetCounters `protobuf:"bytes,11,opt,name=counters,proto3" json:"counters,omitempty"`
}

func (x *EthernetState) Reset() {
	*x = EthernetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkethernet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetState) ProtoMessage() {}

func (x *EthernetState) ProtoReflect() protoreflect.Message {
	mi := &file_networkethernet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetState.ProtoReflect.Descriptor instead.
func (*EthernetState) Descriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{3}
}

func (x *EthernetState) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EthernetState) GetAutoNegotiate() bool {
	if x != nil {
		return x.AutoNegotiate
	}
	return false
}

func (x *EthernetState) GetStandaloneLinkTraining() bool {
	if x != nil {
		return x.StandaloneLinkTraining
	}
	return false
}

func (x *EthernetState) GetDuplexMode() EthDuplexMode {
	if x != nil {
		return x.DuplexMode
	}
	return EthDuplexMode_ETH_DUPLEX_MODE_UNSPECIFIED
}

func (x *EthernetState) GetPortSpeed() EthPortSpeed {
	if x != nil {
		return x.PortSpeed
	}
	return EthPortSpeed_ETH_PORT_SPEED_UNSPECIFIED
}

func (x *EthernetState) GetEnableFlowControl() bool {
	if x != nil {
		return x.EnableFlowControl
	}
	return false
}

func (x *EthernetState) GetFecMode() EthFecMode {
	if x != nil {
		return x.FecMode
	}
	return EthFecMode_ETH_FEC_MODE_UNSPECIFIED
}

func (x *EthernetState) GetHwMacAddress() string {
	if x != nil {
		return x.HwMacAddress
	}
	return ""
}

func (x *EthernetState) GetNegotiatedDuplexMode() EthDuplexMode {
	if x != nil {
		return x.NegotiatedDuplexMode
	}
	return EthDuplexMode_ETH_DUPLEX_MODE_UNSPECIFIED
}

func (x *EthernetState) GetNegotiatedPortSpeed() EthPortSpeed {
	if x != nil {
		return x.NegotiatedPortSpeed
	}
	return EthPortSpeed_ETH_PORT_SPEED_UNSPECIFIED
}

func (x *EthernetState) GetCounters() *EthernetCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

// Ethernet Interface
type EthernetIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethernet Interface Configuration settings
	Config *EthernetConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Ethernet Interface State information
	State *EthernetState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// Switched VLAN Interface configuration for interface
	SwitchedVlan *VlanSwitchedIf `protobuf:"bytes,3,opt,name=switched_vlan,json=switchedVlan,proto3" json:"switched_vlan,omitempty"`
}

func (x *EthernetIf) Reset() {
	*x = EthernetIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkethernet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetIf) ProtoMessage() {}

func (x *EthernetIf) ProtoReflect() protoreflect.Message {
	mi := &file_networkethernet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetIf.ProtoReflect.Descriptor instead.
func (*EthernetIf) Descriptor() ([]byte, []int) {
	return file_networkethernet_proto_rawDescGZIP(), []int{4}
}

func (x *EthernetIf) GetConfig() *EthernetConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EthernetIf) GetState() *EthernetState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *EthernetIf) GetSwitchedVlan() *VlanSwitchedIf {
	if x != nil {
		return x.SwitchedVlan
	}
	return nil
}

var File_networkethernet_proto protoreflect.FileDescriptor

var file_networkethernet_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xde, 0x03, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x0b, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x51, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x46, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x66, 0x65, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x16, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x49, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x78, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x36, 0x34, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x36, 0x35, 0x5f, 0x74, 0x6f, 0x31, 0x32, 0x37, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x72, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x36, 0x35,
	0x54, 0x6f, 0x31, 0x32, 0x37, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x31, 0x32, 0x38, 0x5f, 0x74, 0x6f, 0x32,
	0x35, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x78, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x31, 0x32, 0x38, 0x54, 0x6f, 0x32, 0x35, 0x35,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x74, 0x6f, 0x35, 0x31, 0x31, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x32, 0x35, 0x36, 0x54, 0x6f, 0x35, 0x31, 0x31, 0x12, 0x3b, 0x0a, 0x1a, 0x72,
	0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x35,
	0x31, 0x32, 0x5f, 0x74, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x17, 0x72, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x35,
	0x31, 0x32, 0x54, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x78, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x31, 0x30, 0x32, 0x34,
	0x5f, 0x74, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72,
	0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x31, 0x30, 0x32,
	0x34, 0x54, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x22, 0x8d, 0x08, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x72, 0x78, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x78, 0x4d,
	0x61, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x78,
	0x4d, 0x61, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x78, 0x4f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x78, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x78, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x78, 0x5f, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x4a, 0x61, 0x62, 0x62, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x72, 0x78, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x69, 0x65, 0x65, 0x65, 0x38,
	0x30, 0x32, 0x31, 0x71, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x72, 0x78, 0x49, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x71, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x78, 0x43,
	0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x78, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x72, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x54, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x72, 0x78, 0x4d, 0x61, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x78, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x78, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x78, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x78, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x78, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x72, 0x78, 0x4d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x63,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f,
	0x75, 0x74, 0x5f, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x71, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x49, 0x65,
	0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x71, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x11, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x78, 0x12, 0x6d, 0x0a, 0x13, 0x65, 0x74, 0x68, 0x5f,
	0x72, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x74, 0x68, 0x52, 0x78, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x06, 0x0a, 0x0d, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0b, 0x64,
	0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x44, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x74, 0x68, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x66, 0x65, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x77,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x16, 0x6e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x14, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x13, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x53, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x0a, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x49, 0x66, 0x12, 0x4d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a,
	0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49, 0x66, 0x52, 0x0c, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x2a, 0x64, 0x0a, 0x0d, 0x45, 0x74,
	0x68, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x54, 0x48, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x54, 0x48, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x48, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x02,
	0x2a, 0xa0, 0x03, 0x0a, 0x0c, 0x45, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x48,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x4d,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x48,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x30, 0x30,
	0x4d, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x47, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54,
	0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x47, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54,
	0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x47,
	0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54,
	0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30,
	0x47, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34,
	0x30, 0x30, 0x47, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x36, 0x30, 0x30, 0x47, 0x10, 0x0d, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x38, 0x30, 0x30, 0x47, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54, 0x48, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x0f, 0x2a, 0xb0, 0x01, 0x0a, 0x0a, 0x45, 0x74, 0x68, 0x46, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x54, 0x48, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x48, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x46, 0x43, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x48, 0x5f, 0x46, 0x45, 0x43,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x53, 0x35, 0x32, 0x38, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x54, 0x48, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x53,
	0x35, 0x34, 0x34, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x54, 0x48, 0x5f, 0x46, 0x45, 0x43,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x53, 0x35, 0x34, 0x34, 0x5f, 0x32, 0x58, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x54, 0x48, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x42, 0x83, 0x01, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x42, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_networkethernet_proto_rawDescOnce sync.Once
	file_networkethernet_proto_rawDescData = file_networkethernet_proto_rawDesc
)

func file_networkethernet_proto_rawDescGZIP() []byte {
	file_networkethernet_proto_rawDescOnce.Do(func() {
		file_networkethernet_proto_rawDescData = protoimpl.X.CompressGZIP(file_networkethernet_proto_rawDescData)
	})
	return file_networkethernet_proto_rawDescData
}

var file_networkethernet_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_networkethernet_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_networkethernet_proto_goTypes = []interface{}{
	(EthDuplexMode)(0),             // 0: opi_api.network.opinetcommon.v1alpha1.EthDuplexMode
	(EthPortSpeed)(0),              // 1: opi_api.network.opinetcommon.v1alpha1.EthPortSpeed
	(EthFecMode)(0),                // 2: opi_api.network.opinetcommon.v1alpha1.EthFecMode
	(*EthernetConfig)(nil),         // 3: opi_api.network.opinetcommon.v1alpha1.EthernetConfig
	(*EthernetInDistribution)(nil), // 4: opi_api.network.opinetcommon.v1alpha1.EthernetInDistribution
	(*EthernetCounters)(nil),       // 5: opi_api.network.opinetcommon.v1alpha1.EthernetCounters
	(*EthernetState)(nil),          // 6: opi_api.network.opinetcommon.v1alpha1.EthernetState
	(*EthernetIf)(nil),             // 7: opi_api.network.opinetcommon.v1alpha1.EthernetIf
	(*VlanSwitchedIf)(nil),         // 8: opi_api.network.opinetcommon.v1alpha1.VlanSwitchedIf
}
var file_networkethernet_proto_depIdxs = []int32{
	0,  // 0: opi_api.network.opinetcommon.v1alpha1.EthernetConfig.duplex_mode:type_name -> opi_api.network.opinetcommon.v1alpha1.EthDuplexMode
	1,  // 1: opi_api.network.opinetcommon.v1alpha1.EthernetConfig.port_speed:type_name -> opi_api.network.opinetcommon.v1alpha1.EthPortSpeed
	2,  // 2: opi_api.network.opinetcommon.v1alpha1.EthernetConfig.fec_mode:type_name -> opi_api.network.opinetcommon.v1alpha1.EthFecMode
	4,  // 3: opi_api.network.opinetcommon.v1alpha1.EthernetCounters.eth_rx_distribution:type_name -> opi_api.network.opinetcommon.v1alpha1.EthernetInDistribution
	0,  // 4: opi_api.network.opinetcommon.v1alpha1.EthernetState.duplex_mode:type_name -> opi_api.network.opinetcommon.v1alpha1.EthDuplexMode
	1,  // 5: opi_api.network.opinetcommon.v1alpha1.EthernetState.port_speed:type_name -> opi_api.network.opinetcommon.v1alpha1.EthPortSpeed
	2,  // 6: opi_api.network.opinetcommon.v1alpha1.EthernetState.fec_mode:type_name -> opi_api.network.opinetcommon.v1alpha1.EthFecMode
	0,  // 7: opi_api.network.opinetcommon.v1alpha1.EthernetState.negotiated_duplex_mode:type_name -> opi_api.network.opinetcommon.v1alpha1.EthDuplexMode
	1,  // 8: opi_api.network.opinetcommon.v1alpha1.EthernetState.negotiated_port_speed:type_name -> opi_api.network.opinetcommon.v1alpha1.EthPortSpeed
	5,  // 9: opi_api.network.opinetcommon.v1alpha1.EthernetState.counters:type_name -> opi_api.network.opinetcommon.v1alpha1.EthernetCounters
	3,  // 10: opi_api.network.opinetcommon.v1alpha1.EthernetIf.config:type_name -> opi_api.network.opinetcommon.v1alpha1.EthernetConfig
	6,  // 11: opi_api.network.opinetcommon.v1alpha1.EthernetIf.state:type_name -> opi_api.network.opinetcommon.v1alpha1.EthernetState
	8,  // 12: opi_api.network.opinetcommon.v1alpha1.EthernetIf.switched_vlan:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanSwitchedIf
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_networkethernet_proto_init() }
func file_networkethernet_proto_init() {
	if File_networkethernet_proto != nil {
		return
	}
	file_networkvlan_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_networkethernet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkethernet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetInDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkethernet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkethernet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkethernet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networkethernet_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_networkethernet_proto_goTypes,
		DependencyIndexes: file_networkethernet_proto_depIdxs,
		EnumInfos:         file_networkethernet_proto_enumTypes,
		MessageInfos:      file_networkethernet_proto_msgTypes,
	}.Build()
	File_networkethernet_proto = out.File
	file_networkethernet_proto_rawDesc = nil
	file_networkethernet_proto_goTypes = nil
	file_networkethernet_proto_depIdxs = nil
}
