// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2024 Dell Inc, or its subsidiaries.
//
// Derived from the OpenConfig interfaces model github.com/openconfig/public/release/models/vlan
//
// (-- api-linter: core::0141::forbidden-types=disabled
//     aip.dev/not-precedent: counters, mtu, index must be uint and not int. --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: networkvlan.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tag Protocol Identifier (TPID) Types Enumeration
type TpidTypes int32

const (
	// Unspecified
	TpidTypes_TPID_TYPES_UNSPECIFIED TpidTypes = 0
	// Default value for 802.1q single-tagged VLANs
	TpidTypes_TPID_TYPES_0X8100 TpidTypes = 1
	// Value for 802.1ad provider bridging, QinQ, or stacked VLANs
	TpidTypes_TPID_TYPES_0X88A8 TpidTypes = 2
	// Alternate TPID value
	TpidTypes_TPID_TYPES_0X9100 TpidTypes = 3
	// Alternate TPID value
	TpidTypes_TPID_TYPES_0X9200 TpidTypes = 4
	// Any - Wildcard that matches any of the singly or multiply tagged VLANS
	TpidTypes_TPID_TYPES_ANY TpidTypes = 5
)

// Enum value maps for TpidTypes.
var (
	TpidTypes_name = map[int32]string{
		0: "TPID_TYPES_UNSPECIFIED",
		1: "TPID_TYPES_0X8100",
		2: "TPID_TYPES_0X88A8",
		3: "TPID_TYPES_0X9100",
		4: "TPID_TYPES_0X9200",
		5: "TPID_TYPES_ANY",
	}
	TpidTypes_value = map[string]int32{
		"TPID_TYPES_UNSPECIFIED": 0,
		"TPID_TYPES_0X8100":      1,
		"TPID_TYPES_0X88A8":      2,
		"TPID_TYPES_0X9100":      3,
		"TPID_TYPES_0X9200":      4,
		"TPID_TYPES_ANY":         5,
	}
)

func (x TpidTypes) Enum() *TpidTypes {
	p := new(TpidTypes)
	*p = x
	return p
}

func (x TpidTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TpidTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_networkvlan_proto_enumTypes[0].Descriptor()
}

func (TpidTypes) Type() protoreflect.EnumType {
	return &file_networkvlan_proto_enumTypes[0]
}

func (x TpidTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TpidTypes.Descriptor instead.
func (TpidTypes) EnumDescriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{0}
}

// Vlan Stack Action to be performed on the VLAN stack
type VlanStackAction int32

const (
	// No action to perform on the VLAN Stack
	VlanStackAction_VLAN_STACK_ACTION_UNSPECIFIED VlanStackAction = 0
	// PUSH a VLAN onto the VLAN Stack
	VlanStackAction_VLAN_STACK_ACTION_PUSH VlanStackAction = 1
	// POP a VLAN from the VLAN Stack
	VlanStackAction_VLAN_STACK_ACTION_POP VlanStackAction = 2
	// SWAP the VLAN at the top of the VLAN Stack
	VlanStackAction_VLAN_STACK_ACTION_SWAP VlanStackAction = 3
)

// Enum value maps for VlanStackAction.
var (
	VlanStackAction_name = map[int32]string{
		0: "VLAN_STACK_ACTION_UNSPECIFIED",
		1: "VLAN_STACK_ACTION_PUSH",
		2: "VLAN_STACK_ACTION_POP",
		3: "VLAN_STACK_ACTION_SWAP",
	}
	VlanStackAction_value = map[string]int32{
		"VLAN_STACK_ACTION_UNSPECIFIED": 0,
		"VLAN_STACK_ACTION_PUSH":        1,
		"VLAN_STACK_ACTION_POP":         2,
		"VLAN_STACK_ACTION_SWAP":        3,
	}
)

func (x VlanStackAction) Enum() *VlanStackAction {
	p := new(VlanStackAction)
	*p = x
	return p
}

func (x VlanStackAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanStackAction) Descriptor() protoreflect.EnumDescriptor {
	return file_networkvlan_proto_enumTypes[1].Descriptor()
}

func (VlanStackAction) Type() protoreflect.EnumType {
	return &file_networkvlan_proto_enumTypes[1]
}

func (x VlanStackAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanStackAction.Descriptor instead.
func (VlanStackAction) EnumDescriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{1}
}

// VLAN Interface Mode
type VlanIfMode int32

const (
	// Interface Mode Unspecified
	VlanIfMode_VLAN_IF_MODE_UNSPECIFIED VlanIfMode = 0
	// Interface mode ACCESS
	VlanIfMode_VLAN_IF_MODE_ACCESS VlanIfMode = 1
	// Interface mode TRUNK
	VlanIfMode_VLAN_IF_MODE_TRUNK VlanIfMode = 2
)

// Enum value maps for VlanIfMode.
var (
	VlanIfMode_name = map[int32]string{
		0: "VLAN_IF_MODE_UNSPECIFIED",
		1: "VLAN_IF_MODE_ACCESS",
		2: "VLAN_IF_MODE_TRUNK",
	}
	VlanIfMode_value = map[string]int32{
		"VLAN_IF_MODE_UNSPECIFIED": 0,
		"VLAN_IF_MODE_ACCESS":      1,
		"VLAN_IF_MODE_TRUNK":       2,
	}
)

func (x VlanIfMode) Enum() *VlanIfMode {
	p := new(VlanIfMode)
	*p = x
	return p
}

func (x VlanIfMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanIfMode) Descriptor() protoreflect.EnumDescriptor {
	return file_networkvlan_proto_enumTypes[2].Descriptor()
}

func (VlanIfMode) Type() protoreflect.EnumType {
	return &file_networkvlan_proto_enumTypes[2]
}

func (x VlanIfMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanIfMode.Descriptor instead.
func (VlanIfMode) EnumDescriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{2}
}

// Switched VLAN Configuration Settings that are part of the Ethernet interface
type SwitchedVlanSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting for the VLAN interface to access or trunk mode
	VlanInterfaceMode VlanIfMode `protobuf:"varint,1,opt,name=vlan_interface_mode,json=vlanInterfaceMode,proto3,enum=opi_api.network.opinetcommon.v1alpha1.VlanIfMode" json:"vlan_interface_mode,omitempty"`
	// VLAN ID when the mode is set to trunk mode
	NativeVlan uint32 `protobuf:"varint,2,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	// VLAN ID when the mode is set to access mode
	AccessVlan uint32 `protobuf:"varint,3,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	// Allowed VLANs may be specified for trunk mode interfaces
	TrunkVlans string `protobuf:"bytes,4,opt,name=trunk_vlans,json=trunkVlans,proto3" json:"trunk_vlans,omitempty"`
}

func (x *SwitchedVlanSetting) Reset() {
	*x = SwitchedVlanSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchedVlanSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchedVlanSetting) ProtoMessage() {}

func (x *SwitchedVlanSetting) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchedVlanSetting.ProtoReflect.Descriptor instead.
func (*SwitchedVlanSetting) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{0}
}

func (x *SwitchedVlanSetting) GetVlanInterfaceMode() VlanIfMode {
	if x != nil {
		return x.VlanInterfaceMode
	}
	return VlanIfMode_VLAN_IF_MODE_UNSPECIFIED
}

func (x *SwitchedVlanSetting) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *SwitchedVlanSetting) GetAccessVlan() uint32 {
	if x != nil {
		return x.AccessVlan
	}
	return 0
}

func (x *SwitchedVlanSetting) GetTrunkVlans() string {
	if x != nil {
		return x.TrunkVlans
	}
	return ""
}

// VLAN settings associated with the Ethernet Interface
type VlanSwitchedIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration parameters for VLAN
	Config *SwitchedVlanSetting `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// State variables for VLAN
	State *SwitchedVlanSetting `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *VlanSwitchedIf) Reset() {
	*x = VlanSwitchedIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanSwitchedIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanSwitchedIf) ProtoMessage() {}

func (x *VlanSwitchedIf) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanSwitchedIf.ProtoReflect.Descriptor instead.
func (*VlanSwitchedIf) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{1}
}

func (x *VlanSwitchedIf) GetConfig() *SwitchedVlanSetting {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *VlanSwitchedIf) GetState() *SwitchedVlanSetting {
	if x != nil {
		return x.State
	}
	return nil
}

// VLAN Ingress and Egress Settings
type VlanIngressEgressSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VLAN stack behaviors for packets that arrive or are transmitted on
	// this subinterface after their VLAN idenitifer(s) have been matched
	Vlanstackaction VlanStackAction `protobuf:"varint,1,opt,name=vlanstackaction,proto3,enum=opi_api.network.opinetcommon.v1alpha1.VlanStackAction" json:"vlanstackaction,omitempty"`
	// VLAN identifier - (1-4094) and will utilize 16 bits max
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// The tag protocol identifier field (TPID) that is used by the action
	// configured by 'vlan-stack-action' when modifying the VLAN stack.
	Tpid TpidTypes `protobuf:"varint,3,opt,name=tpid,proto3,enum=opi_api.network.opinetcommon.v1alpha1.TpidTypes" json:"tpid,omitempty"`
}

func (x *VlanIngressEgressSetting) Reset() {
	*x = VlanIngressEgressSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIngressEgressSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIngressEgressSetting) ProtoMessage() {}

func (x *VlanIngressEgressSetting) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIngressEgressSetting.ProtoReflect.Descriptor instead.
func (*VlanIngressEgressSetting) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{2}
}

func (x *VlanIngressEgressSetting) GetVlanstackaction() VlanStackAction {
	if x != nil {
		return x.Vlanstackaction
	}
	return VlanStackAction_VLAN_STACK_ACTION_UNSPECIFIED
}

func (x *VlanIngressEgressSetting) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *VlanIngressEgressSetting) GetTpid() TpidTypes {
	if x != nil {
		return x.Tpid
	}
	return TpidTypes_TPID_TYPES_UNSPECIFIED
}

// VLAN Interface Configuration
type VlanIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VLAN Tag matching schemes
	Match *VlanIf_VlanMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Ingress VLAN stack behaviors after received packets have matched
	Ingressmapping *VlanIf_VlanIngressMapping `protobuf:"bytes,2,opt,name=ingressmapping,proto3" json:"ingressmapping,omitempty"`
	// Egress VLAN stack behaviors for output packets
	Egressmapping *VlanIf_VlanEgressMapping `protobuf:"bytes,3,opt,name=egressmapping,proto3" json:"egressmapping,omitempty"`
}

func (x *VlanIf) Reset() {
	*x = VlanIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf) ProtoMessage() {}

func (x *VlanIf) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf.ProtoReflect.Descriptor instead.
func (*VlanIf) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3}
}

func (x *VlanIf) GetMatch() *VlanIf_VlanMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *VlanIf) GetIngressmapping() *VlanIf_VlanIngressMapping {
	if x != nil {
		return x.Ingressmapping
	}
	return nil
}

func (x *VlanIf) GetEgressmapping() *VlanIf_VlanEgressMapping {
	if x != nil {
		return x.Egressmapping
	}
	return nil
}

// Configuration for VLAN tag matching schemes
type VlanIf_VlanMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Single tagged VLAN exact matching
	Singletagged *VlanIf_VlanMatch_SingleTagged `protobuf:"bytes,1,opt,name=singletagged,proto3" json:"singletagged,omitempty"`
	// Single tag list VLAN matching
	Singletaggedlist *VlanIf_VlanMatch_SingleTaggedList `protobuf:"bytes,2,opt,name=singletaggedlist,proto3" json:"singletaggedlist,omitempty"`
}

func (x *VlanIf_VlanMatch) Reset() {
	*x = VlanIf_VlanMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanMatch) ProtoMessage() {}

func (x *VlanIf_VlanMatch) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanMatch.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanMatch) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 0}
}

func (x *VlanIf_VlanMatch) GetSingletagged() *VlanIf_VlanMatch_SingleTagged {
	if x != nil {
		return x.Singletagged
	}
	return nil
}

func (x *VlanIf_VlanMatch) GetSingletaggedlist() *VlanIf_VlanMatch_SingleTaggedList {
	if x != nil {
		return x.Singletaggedlist
	}
	return nil
}

// Ingress VLAN stack behaviors for packets that arrive on this subinterface
// after their VLAN idenitifer(s) have been matched
type VlanIf_VlanIngressMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for ingress VLAN and label behaviors for packets that
	// arrive on this subinterface
	Config *VlanIngressEgressSetting `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// State for ingress VLAN and label behaviors for packets that arrive
	// on this subinterface
	State *VlanIngressEgressSetting `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *VlanIf_VlanIngressMapping) Reset() {
	*x = VlanIf_VlanIngressMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanIngressMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanIngressMapping) ProtoMessage() {}

func (x *VlanIf_VlanIngressMapping) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanIngressMapping.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanIngressMapping) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 1}
}

func (x *VlanIf_VlanIngressMapping) GetConfig() *VlanIngressEgressSetting {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *VlanIf_VlanIngressMapping) GetState() *VlanIngressEgressSetting {
	if x != nil {
		return x.State
	}
	return nil
}

// Egress VLAN stack behaviors for packets that are destined for output via
// this subinterface
type VlanIf_VlanEgressMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for egress VLAN stack behaviors for packets that are
	// destined for output via this subinterface
	Config *VlanIngressEgressSetting `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// State for engress VLAN stack behaviors for packets that are destined
	// for output via this subinterface
	State *VlanIngressEgressSetting `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *VlanIf_VlanEgressMapping) Reset() {
	*x = VlanIf_VlanEgressMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanEgressMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanEgressMapping) ProtoMessage() {}

func (x *VlanIf_VlanEgressMapping) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanEgressMapping.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanEgressMapping) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 2}
}

func (x *VlanIf_VlanEgressMapping) GetConfig() *VlanIngressEgressSetting {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *VlanIf_VlanEgressMapping) GetState() *VlanIngressEgressSetting {
	if x != nil {
		return x.State
	}
	return nil
}

// Single Tagged matching of exact VLAN identifier
type VlanIf_VlanMatch_SingleTagged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for exact matching of single tagged packets
	Config *VlanIf_VlanMatch_SingleTagged_SingleTagConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// State for exact matching of single tagged packets
	State *VlanIf_VlanMatch_SingleTagged_SingleTagState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *VlanIf_VlanMatch_SingleTagged) Reset() {
	*x = VlanIf_VlanMatch_SingleTagged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanMatch_SingleTagged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanMatch_SingleTagged) ProtoMessage() {}

func (x *VlanIf_VlanMatch_SingleTagged) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanMatch_SingleTagged.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanMatch_SingleTagged) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *VlanIf_VlanMatch_SingleTagged) GetConfig() *VlanIf_VlanMatch_SingleTagged_SingleTagConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *VlanIf_VlanMatch_SingleTagged) GetState() *VlanIf_VlanMatch_SingleTagged_SingleTagState {
	if x != nil {
		return x.State
	}
	return nil
}

// Single tagged list matching configuration
type VlanIf_VlanMatch_SingleTaggedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for single tagged VLAN list
	Config *VlanIf_VlanMatch_SingleTaggedList_TagListConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// State for sintle tagged list
	Status *VlanIf_VlanMatch_SingleTaggedList_TagListStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *VlanIf_VlanMatch_SingleTaggedList) Reset() {
	*x = VlanIf_VlanMatch_SingleTaggedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanMatch_SingleTaggedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanMatch_SingleTaggedList) ProtoMessage() {}

func (x *VlanIf_VlanMatch_SingleTaggedList) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanMatch_SingleTaggedList.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanMatch_SingleTaggedList) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *VlanIf_VlanMatch_SingleTaggedList) GetConfig() *VlanIf_VlanMatch_SingleTaggedList_TagListConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *VlanIf_VlanMatch_SingleTaggedList) GetStatus() *VlanIf_VlanMatch_SingleTaggedList_TagListStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Configuration for matching single-tagged packets with an exact
// VLAN identifier
type VlanIf_VlanMatch_SingleTagged_SingleTagConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Single tag VLAN Identifier (1-4094)
	VlanId uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagConfig) Reset() {
	*x = VlanIf_VlanMatch_SingleTagged_SingleTagConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanMatch_SingleTagged_SingleTagConfig) ProtoMessage() {}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanMatch_SingleTagged_SingleTagConfig.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanMatch_SingleTagged_SingleTagConfig) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 0, 0, 0}
}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagConfig) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// State for matching single-tagged packets with an exact VLAN
type VlanIf_VlanMatch_SingleTagged_SingleTagState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Single tag VLAN Identifier configured (1-4094)
	VlanId uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagState) Reset() {
	*x = VlanIf_VlanMatch_SingleTagged_SingleTagState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanMatch_SingleTagged_SingleTagState) ProtoMessage() {}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagState) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanMatch_SingleTagged_SingleTagState.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanMatch_SingleTagged_SingleTagState) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 0, 0, 1}
}

func (x *VlanIf_VlanMatch_SingleTagged_SingleTagState) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// Configuration for matching single-tagged packets with a list of
// VLAN identifiers
type VlanIf_VlanMatch_SingleTaggedList_TagListConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of VLAN identifiers for single-tagged packets
	VlanId []uint32 `protobuf:"varint,1,rep,packed,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListConfig) Reset() {
	*x = VlanIf_VlanMatch_SingleTaggedList_TagListConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanMatch_SingleTaggedList_TagListConfig) ProtoMessage() {}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanMatch_SingleTaggedList_TagListConfig.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanMatch_SingleTaggedList_TagListConfig) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 0, 1, 0}
}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListConfig) GetVlanId() []uint32 {
	if x != nil {
		return x.VlanId
	}
	return nil
}

// State for matching single-tagged packets with a list of VLAN
// identifiers
type VlanIf_VlanMatch_SingleTaggedList_TagListStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of VLAN identifiers configured for single-tagged packets
	Vlanid []uint32 `protobuf:"varint,1,rep,packed,name=vlanid,proto3" json:"vlanid,omitempty"`
}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListStatus) Reset() {
	*x = VlanIf_VlanMatch_SingleTaggedList_TagListStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkvlan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIf_VlanMatch_SingleTaggedList_TagListStatus) ProtoMessage() {}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListStatus) ProtoReflect() protoreflect.Message {
	mi := &file_networkvlan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIf_VlanMatch_SingleTaggedList_TagListStatus.ProtoReflect.Descriptor instead.
func (*VlanIf_VlanMatch_SingleTaggedList_TagListStatus) Descriptor() ([]byte, []int) {
	return file_networkvlan_proto_rawDescGZIP(), []int{3, 0, 1, 1}
}

func (x *VlanIf_VlanMatch_SingleTaggedList_TagListStatus) GetVlanid() []uint32 {
	if x != nil {
		return x.Vlanid
	}
	return nil
}

var File_networkvlan_proto protoreflect.FileDescriptor

var file_networkvlan_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xdb, 0x01, 0x0a, 0x13, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x61, 0x0a, 0x13, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x56, 0x6c, 0x61,
	0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49, 0x66, 0x12, 0x52, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56,
	0x6c, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xdb, 0x01, 0x0a, 0x18, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x60,
	0x0a, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x70, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x22,
	0xac, 0x0c, 0x0a, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x12, 0x4d, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e,
	0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x68, 0x0a, 0x0e, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xf4, 0x06, 0x0a, 0x09, 0x56,
	0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x68, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x12, 0x74, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f,
	0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xbe, 0x02, 0x0a, 0x0c, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e,
	0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x2a, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x29,
	0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xc5, 0x02, 0x0a, 0x10, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6e,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x28,
	0x0a, 0x0d, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x27, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6c, 0x61,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x69,
	0x64, 0x1a, 0xc4, 0x01, 0x0a, 0x12, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x11, 0x56, 0x6c, 0x61,
	0x6e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x57,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x97,
	0x01, 0x0a, 0x09, 0x54, 0x70, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x50, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x50, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x30, 0x58, 0x38, 0x31, 0x30, 0x30, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x30, 0x58,
	0x38, 0x38, 0x41, 0x38, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x5f, 0x30, 0x58, 0x39, 0x31, 0x30, 0x30, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x30, 0x58, 0x39, 0x32,
	0x30, 0x30, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x05, 0x2a, 0x87, 0x01, 0x0a, 0x0f, 0x56, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56,
	0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x41, 0x50,
	0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x49, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x42,
	0x7f, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_networkvlan_proto_rawDescOnce sync.Once
	file_networkvlan_proto_rawDescData = file_networkvlan_proto_rawDesc
)

func file_networkvlan_proto_rawDescGZIP() []byte {
	file_networkvlan_proto_rawDescOnce.Do(func() {
		file_networkvlan_proto_rawDescData = protoimpl.X.CompressGZIP(file_networkvlan_proto_rawDescData)
	})
	return file_networkvlan_proto_rawDescData
}

var file_networkvlan_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_networkvlan_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_networkvlan_proto_goTypes = []interface{}{
	(TpidTypes)(0),                                          // 0: opi_api.network.opinetcommon.v1alpha1.TpidTypes
	(VlanStackAction)(0),                                    // 1: opi_api.network.opinetcommon.v1alpha1.VlanStackAction
	(VlanIfMode)(0),                                         // 2: opi_api.network.opinetcommon.v1alpha1.VlanIfMode
	(*SwitchedVlanSetting)(nil),                             // 3: opi_api.network.opinetcommon.v1alpha1.SwitchedVlanSetting
	(*VlanSwitchedIf)(nil),                                  // 4: opi_api.network.opinetcommon.v1alpha1.VlanSwitchedIf
	(*VlanIngressEgressSetting)(nil),                        // 5: opi_api.network.opinetcommon.v1alpha1.VlanIngressEgressSetting
	(*VlanIf)(nil),                                          // 6: opi_api.network.opinetcommon.v1alpha1.VlanIf
	(*VlanIf_VlanMatch)(nil),                                // 7: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch
	(*VlanIf_VlanIngressMapping)(nil),                       // 8: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanIngressMapping
	(*VlanIf_VlanEgressMapping)(nil),                        // 9: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanEgressMapping
	(*VlanIf_VlanMatch_SingleTagged)(nil),                   // 10: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged
	(*VlanIf_VlanMatch_SingleTaggedList)(nil),               // 11: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList
	(*VlanIf_VlanMatch_SingleTagged_SingleTagConfig)(nil),   // 12: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagConfig
	(*VlanIf_VlanMatch_SingleTagged_SingleTagState)(nil),    // 13: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagState
	(*VlanIf_VlanMatch_SingleTaggedList_TagListConfig)(nil), // 14: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListConfig
	(*VlanIf_VlanMatch_SingleTaggedList_TagListStatus)(nil), // 15: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListStatus
}
var file_networkvlan_proto_depIdxs = []int32{
	2,  // 0: opi_api.network.opinetcommon.v1alpha1.SwitchedVlanSetting.vlan_interface_mode:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIfMode
	3,  // 1: opi_api.network.opinetcommon.v1alpha1.VlanSwitchedIf.config:type_name -> opi_api.network.opinetcommon.v1alpha1.SwitchedVlanSetting
	3,  // 2: opi_api.network.opinetcommon.v1alpha1.VlanSwitchedIf.state:type_name -> opi_api.network.opinetcommon.v1alpha1.SwitchedVlanSetting
	1,  // 3: opi_api.network.opinetcommon.v1alpha1.VlanIngressEgressSetting.vlanstackaction:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanStackAction
	0,  // 4: opi_api.network.opinetcommon.v1alpha1.VlanIngressEgressSetting.tpid:type_name -> opi_api.network.opinetcommon.v1alpha1.TpidTypes
	7,  // 5: opi_api.network.opinetcommon.v1alpha1.VlanIf.match:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch
	8,  // 6: opi_api.network.opinetcommon.v1alpha1.VlanIf.ingressmapping:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanIngressMapping
	9,  // 7: opi_api.network.opinetcommon.v1alpha1.VlanIf.egressmapping:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanEgressMapping
	10, // 8: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.singletagged:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged
	11, // 9: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.singletaggedlist:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList
	5,  // 10: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanIngressMapping.config:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIngressEgressSetting
	5,  // 11: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanIngressMapping.state:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIngressEgressSetting
	5,  // 12: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanEgressMapping.config:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIngressEgressSetting
	5,  // 13: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanEgressMapping.state:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIngressEgressSetting
	12, // 14: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged.config:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagConfig
	13, // 15: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged.state:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagState
	14, // 16: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.config:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListConfig
	15, // 17: opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.status:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListStatus
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_networkvlan_proto_init() }
func file_networkvlan_proto_init() {
	if File_networkvlan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_networkvlan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchedVlanSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanSwitchedIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIngressEgressSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanIngressMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanEgressMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanMatch_SingleTagged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanMatch_SingleTaggedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanMatch_SingleTagged_SingleTagConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanMatch_SingleTagged_SingleTagState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanMatch_SingleTaggedList_TagListConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkvlan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIf_VlanMatch_SingleTaggedList_TagListStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networkvlan_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_networkvlan_proto_goTypes,
		DependencyIndexes: file_networkvlan_proto_depIdxs,
		EnumInfos:         file_networkvlan_proto_enumTypes,
		MessageInfos:      file_networkvlan_proto_msgTypes,
	}.Build()
	File_networkvlan_proto = out.File
	file_networkvlan_proto_rawDesc = nil
	file_networkvlan_proto_goTypes = nil
	file_networkvlan_proto_depIdxs = nil
}
