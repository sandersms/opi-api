// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2023-2024 Dell Inc, or its subsidiaries.
//
// Derived from the OpenConfig interfaces model github.com/openconfig/public/release/models/interfaces
//
// (-- api-linter: core::0141::forbidden-types=disabled
//     aip.dev/not-precedent: counters, mtu, index must be uint and not int. --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: networkinterfaces.proto

package _go

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Interface Types Enumeration
type InterfaceType int32

const (
	// Interface Unspecified
	InterfaceType_INTERFACE_TYPE_UNSPECIFIED InterfaceType = 0
	// Ethernet Interface
	InterfaceType_INTERFACE_TYPE_ETHERNET InterfaceType = 1
	// Loopback Interface
	InterfaceType_INTERFACE_TYPE_LOOPBACK InterfaceType = 2
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "INTERFACE_TYPE_UNSPECIFIED",
		1: "INTERFACE_TYPE_ETHERNET",
		2: "INTERFACE_TYPE_LOOPBACK",
	}
	InterfaceType_value = map[string]int32{
		"INTERFACE_TYPE_UNSPECIFIED": 0,
		"INTERFACE_TYPE_ETHERNET":    1,
		"INTERFACE_TYPE_LOOPBACK":    2,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_networkinterfaces_proto_enumTypes[0].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_networkinterfaces_proto_enumTypes[0]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{0}
}

// Operational State Enumeration
type OperState int32

const (
	// Unspecified
	OperState_OPER_STATE_UNSPECIFIED OperState = 0
	// Operational Up
	OperState_OPER_STATE_UP OperState = 2
	// Operational Down
	OperState_OPER_STATE_DOWN OperState = 3
	// Operational Testing
	OperState_OPER_STATE_TESTING OperState = 4
	// Unknown
	OperState_OPER_STATE_UNKNOWN OperState = 5
	// Dormant
	OperState_OPER_STATE_DORMANT OperState = 6
	// Not Present
	OperState_OPER_STATE_NOT_PRESENT OperState = 7
	// Lower Layer Down
	OperState_OPER_STATE_LOWER_LAYER_DOWN OperState = 8
)

// Enum value maps for OperState.
var (
	OperState_name = map[int32]string{
		0: "OPER_STATE_UNSPECIFIED",
		2: "OPER_STATE_UP",
		3: "OPER_STATE_DOWN",
		4: "OPER_STATE_TESTING",
		5: "OPER_STATE_UNKNOWN",
		6: "OPER_STATE_DORMANT",
		7: "OPER_STATE_NOT_PRESENT",
		8: "OPER_STATE_LOWER_LAYER_DOWN",
	}
	OperState_value = map[string]int32{
		"OPER_STATE_UNSPECIFIED":      0,
		"OPER_STATE_UP":               2,
		"OPER_STATE_DOWN":             3,
		"OPER_STATE_TESTING":          4,
		"OPER_STATE_UNKNOWN":          5,
		"OPER_STATE_DORMANT":          6,
		"OPER_STATE_NOT_PRESENT":      7,
		"OPER_STATE_LOWER_LAYER_DOWN": 8,
	}
)

func (x OperState) Enum() *OperState {
	p := new(OperState)
	*p = x
	return p
}

func (x OperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperState) Descriptor() protoreflect.EnumDescriptor {
	return file_networkinterfaces_proto_enumTypes[1].Descriptor()
}

func (OperState) Type() protoreflect.EnumType {
	return &file_networkinterfaces_proto_enumTypes[1]
}

func (x OperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperState.Descriptor instead.
func (OperState) EnumDescriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{1}
}

// Interface config
// (-- api-linter: core::0123::resource-annotation=disabled
//
//	aip.dev/not-precedent: the name field is an opaque object --)
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.  This is the opaque object
	// used for designating the created interface.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of interface - Ethernet and others
	Type InterfaceType `protobuf:"varint,2,opt,name=type,proto3,enum=opi_api.network.opinetcommon.v1alpha1.InterfaceType" json:"type,omitempty"`
	// MTU for the interface that can be configured
	Mtu uint32 `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Setting the loopback mode of the interface
	LoopbackMode bool `protobuf:"varint,4,opt,name=loopback_mode,json=loopbackMode,proto3" json:"loopback_mode,omitempty"`
	// Description of the interface and usage
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Setting for enabling/disabling the interface
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// VLAN Tag Protocol Identifier (TPID)
	Tpid TpidTypes `protobuf:"varint,7,opt,name=tpid,proto3,enum=opi_api.network.opinetcommon.v1alpha1.TpidTypes" json:"tpid,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_INTERFACE_TYPE_UNSPECIFIED
}

func (x *Config) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Config) GetLoopbackMode() bool {
	if x != nil {
		return x.LoopbackMode
	}
	return false
}

func (x *Config) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Config) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Config) GetTpid() TpidTypes {
	if x != nil {
		return x.Tpid
	}
	return TpidTypes_TPID_TYPES_UNSPECIFIED
}

// Statistics Counters for the interface - ro
type Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Received Octet counter
	RxOctets uint64 `protobuf:"varint,1,opt,name=rx_octets,json=rxOctets,proto3" json:"rx_octets,omitempty"`
	// Received Packet counter
	RxPackets uint64 `protobuf:"varint,2,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	// Unicast packets received counter
	RxUnicastPkts uint64 `protobuf:"varint,3,opt,name=rx_unicast_pkts,json=rxUnicastPkts,proto3" json:"rx_unicast_pkts,omitempty"`
	// Broadcast packets received counter
	RxBroadcastPkts uint64 `protobuf:"varint,4,opt,name=rx_broadcast_pkts,json=rxBroadcastPkts,proto3" json:"rx_broadcast_pkts,omitempty"`
	// multicast packets received counter
	RxMulticastPkts uint64 `protobuf:"varint,5,opt,name=rx_multicast_pkts,json=rxMulticastPkts,proto3" json:"rx_multicast_pkts,omitempty"`
	// discarded received packets counter
	RxDiscards uint64 `protobuf:"varint,6,opt,name=rx_discards,json=rxDiscards,proto3" json:"rx_discards,omitempty"`
	// Receive error counter
	RxErrors uint64 `protobuf:"varint,7,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	// Unknown received protocol counter
	RxUnknownProtos uint64 `protobuf:"varint,8,opt,name=rx_unknown_protos,json=rxUnknownProtos,proto3" json:"rx_unknown_protos,omitempty"`
	// Received FCS error counter
	RxFcsErrors uint64 `protobuf:"varint,9,opt,name=rx_fcs_errors,json=rxFcsErrors,proto3" json:"rx_fcs_errors,omitempty"`
	// Transmit octet counter
	OutOctets uint64 `protobuf:"varint,10,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	// Transmit packet counter
	OutPackets uint64 `protobuf:"varint,11,opt,name=out_packets,json=outPackets,proto3" json:"out_packets,omitempty"`
	// Unicast packet transmit counter
	OutUnicastPkts uint64 `protobuf:"varint,12,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"`
	// Broadcast packet transmit counter
	OutBroadcastPkts uint64 `protobuf:"varint,13,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	// Multicast packet transmit counter
	OutMulticastPkts uint64 `protobuf:"varint,14,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	// Discarded transmit packet counter
	OutDiscards uint64 `protobuf:"varint,15,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	// Transmit error counter
	OutErrors uint64 `protobuf:"varint,16,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	// Carrier transition count
	CarrierTransitions uint64 `protobuf:"varint,17,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"`
	// Timestamp of the last time the interface counters were cleared
	LastClear uint64 `protobuf:"varint,18,opt,name=last_clear,json=lastClear,proto3" json:"last_clear,omitempty"`
}

func (x *Counters) Reset() {
	*x = Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counters) ProtoMessage() {}

func (x *Counters) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counters.ProtoReflect.Descriptor instead.
func (*Counters) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{1}
}

func (x *Counters) GetRxOctets() uint64 {
	if x != nil {
		return x.RxOctets
	}
	return 0
}

func (x *Counters) GetRxPackets() uint64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *Counters) GetRxUnicastPkts() uint64 {
	if x != nil {
		return x.RxUnicastPkts
	}
	return 0
}

func (x *Counters) GetRxBroadcastPkts() uint64 {
	if x != nil {
		return x.RxBroadcastPkts
	}
	return 0
}

func (x *Counters) GetRxMulticastPkts() uint64 {
	if x != nil {
		return x.RxMulticastPkts
	}
	return 0
}

func (x *Counters) GetRxDiscards() uint64 {
	if x != nil {
		return x.RxDiscards
	}
	return 0
}

func (x *Counters) GetRxErrors() uint64 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *Counters) GetRxUnknownProtos() uint64 {
	if x != nil {
		return x.RxUnknownProtos
	}
	return 0
}

func (x *Counters) GetRxFcsErrors() uint64 {
	if x != nil {
		return x.RxFcsErrors
	}
	return 0
}

func (x *Counters) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

func (x *Counters) GetOutPackets() uint64 {
	if x != nil {
		return x.OutPackets
	}
	return 0
}

func (x *Counters) GetOutUnicastPkts() uint64 {
	if x != nil {
		return x.OutUnicastPkts
	}
	return 0
}

func (x *Counters) GetOutBroadcastPkts() uint64 {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return 0
}

func (x *Counters) GetOutMulticastPkts() uint64 {
	if x != nil {
		return x.OutMulticastPkts
	}
	return 0
}

func (x *Counters) GetOutDiscards() uint64 {
	if x != nil {
		return x.OutDiscards
	}
	return 0
}

func (x *Counters) GetOutErrors() uint64 {
	if x != nil {
		return x.OutErrors
	}
	return 0
}

func (x *Counters) GetCarrierTransitions() uint64 {
	if x != nil {
		return x.CarrierTransitions
	}
	return 0
}

func (x *Counters) GetLastClear() uint64 {
	if x != nil {
		return x.LastClear
	}
	return 0
}

// Interface State information - ro
// (-- api-linter: core::0123::resource-annotation=disabled
//
//	aip.dev/not-precedent: the name field is an opaque object --)
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.  This is the opaque object
	// used for designating the created interface.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Interface type indicator
	Type InterfaceType `protobuf:"varint,2,opt,name=type,proto3,enum=opi_api.network.opinetcommon.v1alpha1.InterfaceType" json:"type,omitempty"`
	// Configured MTU size
	Mtu uint32 `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Configured Loopback mode
	LoopbackMode bool `protobuf:"varint,4,opt,name=loopback_mode,json=loopbackMode,proto3" json:"loopback_mode,omitempty"`
	// Interface description
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Interface enabled indicator
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Interface Index
	Ifindex uint32 `protobuf:"varint,7,opt,name=ifindex,proto3" json:"ifindex,omitempty"`
	// Admin State
	AdminState AdminState `protobuf:"varint,8,opt,name=admin_state,json=adminState,proto3,enum=opi_api.network.opinetcommon.v1alpha1.AdminState" json:"admin_state,omitempty"`
	// Operational State
	OperState OperState `protobuf:"varint,9,opt,name=oper_state,json=operState,proto3,enum=opi_api.network.opinetcommon.v1alpha1.OperState" json:"oper_state,omitempty"`
	// Last Change
	LastChange uint64 `protobuf:"varint,10,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	// Logical interface - when set to true indicates a logical interface with
	// no associated physical port or channel
	Logical bool `protobuf:"varint,11,opt,name=logical,proto3" json:"logical,omitempty"`
	// Management interface - when set to true indicates a dedicated management
	// interface that is independent of the dataplane interfaces such as an out
	// of band management network
	Management bool `protobuf:"varint,12,opt,name=management,proto3" json:"management,omitempty"`
	// CPU interface - when set to true the interface is for traffic handled by
	// the system CPU or control plane
	Cpu bool `protobuf:"varint,13,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Interface Statistics Counters
	Counters *Counters `protobuf:"bytes,14,opt,name=counters,proto3" json:"counters,omitempty"`
	// VLAN Tag Protocol Identifier
	Tpid TpidTypes `protobuf:"varint,15,opt,name=tpid,proto3,enum=opi_api.network.opinetcommon.v1alpha1.TpidTypes" json:"tpid,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{2}
}

func (x *State) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *State) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_INTERFACE_TYPE_UNSPECIFIED
}

func (x *State) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *State) GetLoopbackMode() bool {
	if x != nil {
		return x.LoopbackMode
	}
	return false
}

func (x *State) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *State) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *State) GetIfindex() uint32 {
	if x != nil {
		return x.Ifindex
	}
	return 0
}

func (x *State) GetAdminState() AdminState {
	if x != nil {
		return x.AdminState
	}
	return AdminState_ADMIN_STATE_UNSPECIFIED
}

func (x *State) GetOperState() OperState {
	if x != nil {
		return x.OperState
	}
	return OperState_OPER_STATE_UNSPECIFIED
}

func (x *State) GetLastChange() uint64 {
	if x != nil {
		return x.LastChange
	}
	return 0
}

func (x *State) GetLogical() bool {
	if x != nil {
		return x.Logical
	}
	return false
}

func (x *State) GetManagement() bool {
	if x != nil {
		return x.Management
	}
	return false
}

func (x *State) GetCpu() bool {
	if x != nil {
		return x.Cpu
	}
	return false
}

func (x *State) GetCounters() *Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *State) GetTpid() TpidTypes {
	if x != nil {
		return x.Tpid
	}
	return TpidTypes_TPID_TYPES_UNSPECIFIED
}

// Interface - physical or virtual interface reported
// (-- api-linter: core::0123::resource-annotation=disabled
//
//	aip.dev/not-precedent: the name field is an opaque object --)
type NetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.  This is an opaque object that is not
	// user settable.  It is returned by the created object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration settings - rw
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Interface State and Statistics - ro
	State *State `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Hold Time Settings
	Holdtime *NetInterface_HoldTime `protobuf:"bytes,4,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	// Subinterfaces assigned to the interface
	Subinterfaces *NetInterface_Subinterfaces `protobuf:"bytes,5,opt,name=subinterfaces,proto3" json:"subinterfaces,omitempty"`
	// Ethernet interface
	Ethernet *EthernetIf `protobuf:"bytes,6,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{3}
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NetInterface) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetInterface) GetHoldtime() *NetInterface_HoldTime {
	if x != nil {
		return x.Holdtime
	}
	return nil
}

func (x *NetInterface) GetSubinterfaces() *NetInterface_Subinterfaces {
	if x != nil {
		return x.Subinterfaces
	}
	return nil
}

func (x *NetInterface) GetEthernet() *EthernetIf {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

// Get Interface Request
type GetNetInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of interface requested
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNetInterfaceRequest) Reset() {
	*x = GetNetInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetInterfaceRequest) ProtoMessage() {}

func (x *GetNetInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetInterfaceRequest.ProtoReflect.Descriptor instead.
func (*GetNetInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{4}
}

func (x *GetNetInterfaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// List Interfaces Request
type ListNetInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// page size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNetInterfacesRequest) Reset() {
	*x = ListNetInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetInterfacesRequest) ProtoMessage() {}

func (x *ListNetInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ListNetInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{5}
}

func (x *ListNetInterfacesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNetInterfacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNetInterfacesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List of Interfaces Response
type ListNetInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of interfaces
	NetInterfaces []*NetInterface `protobuf:"bytes,1,rep,name=net_interfaces,json=netInterfaces,proto3" json:"net_interfaces,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNetInterfacesResponse) Reset() {
	*x = ListNetInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetInterfacesResponse) ProtoMessage() {}

func (x *ListNetInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ListNetInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{6}
}

func (x *ListNetInterfacesResponse) GetNetInterfaces() []*NetInterface {
	if x != nil {
		return x.NetInterfaces
	}
	return nil
}

func (x *ListNetInterfacesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Update Interface Request
type UpdateNetInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface update settings
	NetInterface *NetInterface `protobuf:"bytes,1,opt,name=net_interface,json=netInterface,proto3" json:"net_interface,omitempty"`
	// list of fields to update
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the object is found, a new object will be created.
	// In this situation, 'update_mask' is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateNetInterfaceRequest) Reset() {
	*x = UpdateNetInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetInterfaceRequest) ProtoMessage() {}

func (x *UpdateNetInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetInterfaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNetInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNetInterfaceRequest) GetNetInterface() *NetInterface {
	if x != nil {
		return x.NetInterface
	}
	return nil
}

func (x *UpdateNetInterfaceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNetInterfaceRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

// Hold Time Settings
type NetInterface_HoldTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hold Time Config
	HoldConfig *NetInterface_HoldTime_HoldConfig `protobuf:"bytes,1,opt,name=hold_config,json=holdConfig,proto3" json:"hold_config,omitempty"`
	// Hold State Settings
	HoldState *NetInterface_HoldTime_HoldState `protobuf:"bytes,2,opt,name=hold_state,json=holdState,proto3" json:"hold_state,omitempty"`
}

func (x *NetInterface_HoldTime) Reset() {
	*x = NetInterface_HoldTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface_HoldTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface_HoldTime) ProtoMessage() {}

func (x *NetInterface_HoldTime) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface_HoldTime.ProtoReflect.Descriptor instead.
func (*NetInterface_HoldTime) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{3, 0}
}

func (x *NetInterface_HoldTime) GetHoldConfig() *NetInterface_HoldTime_HoldConfig {
	if x != nil {
		return x.HoldConfig
	}
	return nil
}

func (x *NetInterface_HoldTime) GetHoldState() *NetInterface_HoldTime_HoldState {
	if x != nil {
		return x.HoldState
	}
	return nil
}

// Subinterfaces settings - VLAN, etc.
type NetInterface_Subinterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subinterface Settings
	Subinterface []*NetInterface_Subinterfaces_Subinterface `protobuf:"bytes,2,rep,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *NetInterface_Subinterfaces) Reset() {
	*x = NetInterface_Subinterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface_Subinterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface_Subinterfaces) ProtoMessage() {}

func (x *NetInterface_Subinterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface_Subinterfaces.ProtoReflect.Descriptor instead.
func (*NetInterface_Subinterfaces) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{3, 1}
}

func (x *NetInterface_Subinterfaces) GetSubinterface() []*NetInterface_Subinterfaces_Subinterface {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

// Hold Time Config - rw
type NetInterface_HoldTime_HoldConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hold time up
	Up uint32 `protobuf:"varint,1,opt,name=up,proto3" json:"up,omitempty"`
	// Hold time down
	Down uint32 `protobuf:"varint,2,opt,name=down,proto3" json:"down,omitempty"`
}

func (x *NetInterface_HoldTime_HoldConfig) Reset() {
	*x = NetInterface_HoldTime_HoldConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface_HoldTime_HoldConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface_HoldTime_HoldConfig) ProtoMessage() {}

func (x *NetInterface_HoldTime_HoldConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface_HoldTime_HoldConfig.ProtoReflect.Descriptor instead.
func (*NetInterface_HoldTime_HoldConfig) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *NetInterface_HoldTime_HoldConfig) GetUp() uint32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *NetInterface_HoldTime_HoldConfig) GetDown() uint32 {
	if x != nil {
		return x.Down
	}
	return 0
}

// Hold State Settings - ro
type NetInterface_HoldTime_HoldState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hold state up
	Up uint32 `protobuf:"varint,1,opt,name=up,proto3" json:"up,omitempty"`
	// Hold state down
	Down uint32 `protobuf:"varint,2,opt,name=down,proto3" json:"down,omitempty"`
}

func (x *NetInterface_HoldTime_HoldState) Reset() {
	*x = NetInterface_HoldTime_HoldState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface_HoldTime_HoldState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface_HoldTime_HoldState) ProtoMessage() {}

func (x *NetInterface_HoldTime_HoldState) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface_HoldTime_HoldState.ProtoReflect.Descriptor instead.
func (*NetInterface_HoldTime_HoldState) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *NetInterface_HoldTime_HoldState) GetUp() uint32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *NetInterface_HoldTime_HoldState) GetDown() uint32 {
	if x != nil {
		return x.Down
	}
	return 0
}

// Subinterface settings
type NetInterface_Subinterfaces_Subinterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subinterface index
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Subinterface Configuration
	SubifConfig *NetInterface_Subinterfaces_Subinterface_SubifConfig `protobuf:"bytes,2,opt,name=subif_config,json=subifConfig,proto3" json:"subif_config,omitempty"`
	// Subinterface State and Statistics
	State *State `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Subinterface VLAN
	Vlan *VlanIf `protobuf:"bytes,4,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *NetInterface_Subinterfaces_Subinterface) Reset() {
	*x = NetInterface_Subinterfaces_Subinterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface_Subinterfaces_Subinterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface_Subinterfaces_Subinterface) ProtoMessage() {}

func (x *NetInterface_Subinterfaces_Subinterface) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface_Subinterfaces_Subinterface.ProtoReflect.Descriptor instead.
func (*NetInterface_Subinterfaces_Subinterface) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{3, 1, 0}
}

func (x *NetInterface_Subinterfaces_Subinterface) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NetInterface_Subinterfaces_Subinterface) GetSubifConfig() *NetInterface_Subinterfaces_Subinterface_SubifConfig {
	if x != nil {
		return x.SubifConfig
	}
	return nil
}

func (x *NetInterface_Subinterfaces_Subinterface) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NetInterface_Subinterfaces_Subinterface) GetVlan() *VlanIf {
	if x != nil {
		return x.Vlan
	}
	return nil
}

// Subinterface configuration
type NetInterface_Subinterfaces_Subinterface_SubifConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subinterface Index
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Subinterface description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Subinterface enabled
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *NetInterface_Subinterfaces_Subinterface_SubifConfig) Reset() {
	*x = NetInterface_Subinterfaces_Subinterface_SubifConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_networkinterfaces_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface_Subinterfaces_Subinterface_SubifConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface_Subinterfaces_Subinterface_SubifConfig) ProtoMessage() {}

func (x *NetInterface_Subinterfaces_Subinterface_SubifConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networkinterfaces_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface_Subinterfaces_Subinterface_SubifConfig.ProtoReflect.Descriptor instead.
func (*NetInterface_Subinterfaces_Subinterface_SubifConfig) Descriptor() ([]byte, []int) {
	return file_networkinterfaces_proto_rawDescGZIP(), []int{3, 1, 0, 0}
}

func (x *NetInterface_Subinterfaces_Subinterface_SubifConfig) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NetInterface_Subinterfaces_Subinterface_SubifConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetInterface_Subinterfaces_Subinterface_SubifConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_networkinterfaces_proto protoreflect.FileDescriptor

var file_networkinterfaces_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x1a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x76, 0x6c, 0x61,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x28, 0x0a,
	0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x70, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x22, 0x86, 0x06, 0x0a, 0x08, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x72,
	0x78, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x72,
	0x78, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x72, 0x78, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x72, 0x78, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x72, 0x78, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x72, 0x78, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x78,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x72, 0x78, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0f, 0x72, 0x78, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0b, 0x72, 0x78, 0x46, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x22, 0xe2, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x69, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x23, 0x0a,
	0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x74,
	0x70, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e,
	0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x70, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x22, 0xe9, 0x0b, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x6c,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x1a, 0xdc, 0x02, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6a, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x3a,
	0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x02,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x02, 0x75,
	0x70, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x39, 0x0a, 0x09, 0x48, 0x6f,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0xba, 0x04, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0xaf, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x82, 0x01, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x69, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x69, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x1a, 0x6e, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x69, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x3a, 0x6e, 0xea, 0x41, 0x6b, 0x0a, 0x32, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x18, 0x6e, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x7d, 0x2a, 0x0d, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x32, 0x0c, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2a, 0x69, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x2a,
	0xd4, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x32, 0x88, 0x05, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb9,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x3d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x32, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x2a, 0x7d, 0x12, 0xc0, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x3f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x7d, 0x12, 0xf1, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x40, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x64, 0xda, 0x41, 0x19,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a,
	0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x32, 0x31,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x2a,
	0x7d, 0x42, 0x85, 0x01, 0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x16, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6f, 0x70, 0x69,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_networkinterfaces_proto_rawDescOnce sync.Once
	file_networkinterfaces_proto_rawDescData = file_networkinterfaces_proto_rawDesc
)

func file_networkinterfaces_proto_rawDescGZIP() []byte {
	file_networkinterfaces_proto_rawDescOnce.Do(func() {
		file_networkinterfaces_proto_rawDescData = protoimpl.X.CompressGZIP(file_networkinterfaces_proto_rawDescData)
	})
	return file_networkinterfaces_proto_rawDescData
}

var file_networkinterfaces_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_networkinterfaces_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_networkinterfaces_proto_goTypes = []interface{}{
	(InterfaceType)(0),                                          // 0: opi_api.network.opinetcommon.v1alpha1.InterfaceType
	(OperState)(0),                                              // 1: opi_api.network.opinetcommon.v1alpha1.OperState
	(*Config)(nil),                                              // 2: opi_api.network.opinetcommon.v1alpha1.Config
	(*Counters)(nil),                                            // 3: opi_api.network.opinetcommon.v1alpha1.Counters
	(*State)(nil),                                               // 4: opi_api.network.opinetcommon.v1alpha1.State
	(*NetInterface)(nil),                                        // 5: opi_api.network.opinetcommon.v1alpha1.NetInterface
	(*GetNetInterfaceRequest)(nil),                              // 6: opi_api.network.opinetcommon.v1alpha1.GetNetInterfaceRequest
	(*ListNetInterfacesRequest)(nil),                            // 7: opi_api.network.opinetcommon.v1alpha1.ListNetInterfacesRequest
	(*ListNetInterfacesResponse)(nil),                           // 8: opi_api.network.opinetcommon.v1alpha1.ListNetInterfacesResponse
	(*UpdateNetInterfaceRequest)(nil),                           // 9: opi_api.network.opinetcommon.v1alpha1.UpdateNetInterfaceRequest
	(*NetInterface_HoldTime)(nil),                               // 10: opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime
	(*NetInterface_Subinterfaces)(nil),                          // 11: opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces
	(*NetInterface_HoldTime_HoldConfig)(nil),                    // 12: opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime.HoldConfig
	(*NetInterface_HoldTime_HoldState)(nil),                     // 13: opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime.HoldState
	(*NetInterface_Subinterfaces_Subinterface)(nil),             // 14: opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.Subinterface
	(*NetInterface_Subinterfaces_Subinterface_SubifConfig)(nil), // 15: opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig
	(TpidTypes)(0),                                              // 16: opi_api.network.opinetcommon.v1alpha1.TpidTypes
	(AdminState)(0),                                             // 17: opi_api.network.opinetcommon.v1alpha1.AdminState
	(*EthernetIf)(nil),                                          // 18: opi_api.network.opinetcommon.v1alpha1.EthernetIf
	(*fieldmaskpb.FieldMask)(nil),                               // 19: google.protobuf.FieldMask
	(*VlanIf)(nil),                                              // 20: opi_api.network.opinetcommon.v1alpha1.VlanIf
}
var file_networkinterfaces_proto_depIdxs = []int32{
	0,  // 0: opi_api.network.opinetcommon.v1alpha1.Config.type:type_name -> opi_api.network.opinetcommon.v1alpha1.InterfaceType
	16, // 1: opi_api.network.opinetcommon.v1alpha1.Config.tpid:type_name -> opi_api.network.opinetcommon.v1alpha1.TpidTypes
	0,  // 2: opi_api.network.opinetcommon.v1alpha1.State.type:type_name -> opi_api.network.opinetcommon.v1alpha1.InterfaceType
	17, // 3: opi_api.network.opinetcommon.v1alpha1.State.admin_state:type_name -> opi_api.network.opinetcommon.v1alpha1.AdminState
	1,  // 4: opi_api.network.opinetcommon.v1alpha1.State.oper_state:type_name -> opi_api.network.opinetcommon.v1alpha1.OperState
	3,  // 5: opi_api.network.opinetcommon.v1alpha1.State.counters:type_name -> opi_api.network.opinetcommon.v1alpha1.Counters
	16, // 6: opi_api.network.opinetcommon.v1alpha1.State.tpid:type_name -> opi_api.network.opinetcommon.v1alpha1.TpidTypes
	2,  // 7: opi_api.network.opinetcommon.v1alpha1.NetInterface.config:type_name -> opi_api.network.opinetcommon.v1alpha1.Config
	4,  // 8: opi_api.network.opinetcommon.v1alpha1.NetInterface.state:type_name -> opi_api.network.opinetcommon.v1alpha1.State
	10, // 9: opi_api.network.opinetcommon.v1alpha1.NetInterface.holdtime:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime
	11, // 10: opi_api.network.opinetcommon.v1alpha1.NetInterface.subinterfaces:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces
	18, // 11: opi_api.network.opinetcommon.v1alpha1.NetInterface.ethernet:type_name -> opi_api.network.opinetcommon.v1alpha1.EthernetIf
	5,  // 12: opi_api.network.opinetcommon.v1alpha1.ListNetInterfacesResponse.net_interfaces:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface
	5,  // 13: opi_api.network.opinetcommon.v1alpha1.UpdateNetInterfaceRequest.net_interface:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface
	19, // 14: opi_api.network.opinetcommon.v1alpha1.UpdateNetInterfaceRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 15: opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime.hold_config:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime.HoldConfig
	13, // 16: opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime.hold_state:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface.HoldTime.HoldState
	14, // 17: opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.subinterface:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.Subinterface
	15, // 18: opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.Subinterface.subif_config:type_name -> opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig
	4,  // 19: opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.Subinterface.state:type_name -> opi_api.network.opinetcommon.v1alpha1.State
	20, // 20: opi_api.network.opinetcommon.v1alpha1.NetInterface.Subinterfaces.Subinterface.vlan:type_name -> opi_api.network.opinetcommon.v1alpha1.VlanIf
	6,  // 21: opi_api.network.opinetcommon.v1alpha1.NetInterfaceService.GetNetInterface:input_type -> opi_api.network.opinetcommon.v1alpha1.GetNetInterfaceRequest
	7,  // 22: opi_api.network.opinetcommon.v1alpha1.NetInterfaceService.ListNetInterfaces:input_type -> opi_api.network.opinetcommon.v1alpha1.ListNetInterfacesRequest
	9,  // 23: opi_api.network.opinetcommon.v1alpha1.NetInterfaceService.UpdateNetInterface:input_type -> opi_api.network.opinetcommon.v1alpha1.UpdateNetInterfaceRequest
	5,  // 24: opi_api.network.opinetcommon.v1alpha1.NetInterfaceService.GetNetInterface:output_type -> opi_api.network.opinetcommon.v1alpha1.NetInterface
	8,  // 25: opi_api.network.opinetcommon.v1alpha1.NetInterfaceService.ListNetInterfaces:output_type -> opi_api.network.opinetcommon.v1alpha1.ListNetInterfacesResponse
	5,  // 26: opi_api.network.opinetcommon.v1alpha1.NetInterfaceService.UpdateNetInterface:output_type -> opi_api.network.opinetcommon.v1alpha1.NetInterface
	24, // [24:27] is the sub-list for method output_type
	21, // [21:24] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_networkinterfaces_proto_init() }
func file_networkinterfaces_proto_init() {
	if File_networkinterfaces_proto != nil {
		return
	}
	file_networktypes_proto_init()
	file_networkvlan_proto_init()
	file_networkethernet_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_networkinterfaces_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface_HoldTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface_Subinterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface_HoldTime_HoldConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface_HoldTime_HoldState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface_Subinterfaces_Subinterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_networkinterfaces_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface_Subinterfaces_Subinterface_SubifConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_networkinterfaces_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_networkinterfaces_proto_goTypes,
		DependencyIndexes: file_networkinterfaces_proto_depIdxs,
		EnumInfos:         file_networkinterfaces_proto_enumTypes,
		MessageInfos:      file_networkinterfaces_proto_msgTypes,
	}.Build()
	File_networkinterfaces_proto = out.File
	file_networkinterfaces_proto_rawDesc = nil
	file_networkinterfaces_proto_goTypes = nil
	file_networkinterfaces_proto_depIdxs = nil
}
